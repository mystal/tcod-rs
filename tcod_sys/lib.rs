#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals)]
// This is not added by rust-bindgen even though it's used heavily in the
// generated code:
extern crate libc;

/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __llvm__: libc::c_uint = 1;
pub const __clang__: libc::c_uint = 1;
pub const __clang_major__: libc::c_uint = 8;
pub const __clang_minor__: libc::c_uint = 1;
pub const __clang_patchlevel__: libc::c_uint = 0;
pub const __clang_version__: &'static [u8; 23usize] =
    b"8.1.0 (clang-802.0.42)\x00";
pub const __GNUC_MINOR__: libc::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: libc::c_uint = 1;
pub const __GNUC__: libc::c_uint = 4;
pub const __GXX_ABI_VERSION: libc::c_uint = 1002;
pub const __ATOMIC_RELAXED: libc::c_uint = 0;
pub const __ATOMIC_CONSUME: libc::c_uint = 1;
pub const __ATOMIC_ACQUIRE: libc::c_uint = 2;
pub const __ATOMIC_RELEASE: libc::c_uint = 3;
pub const __ATOMIC_ACQ_REL: libc::c_uint = 4;
pub const __ATOMIC_SEQ_CST: libc::c_uint = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: libc::c_uint = 1;
pub const __VERSION__: &'static [u8; 51usize] =
    b"4.2.1 Compatible Apple LLVM 8.1.0 (clang-802.0.42)\x00";
pub const __OBJC_BOOL_IS_BOOL: libc::c_uint = 0;
pub const __CONSTANT_CFSTRINGS__: libc::c_uint = 1;
pub const __BLOCKS__: libc::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: libc::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: libc::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: libc::c_uint = 3412;
pub const __BYTE_ORDER__: libc::c_uint = 1234;
pub const __LITTLE_ENDIAN__: libc::c_uint = 1;
pub const _LP64: libc::c_uint = 1;
pub const __LP64__: libc::c_uint = 1;
pub const __CHAR_BIT__: libc::c_uint = 8;
pub const __SCHAR_MAX__: libc::c_uint = 127;
pub const __SHRT_MAX__: libc::c_uint = 32767;
pub const __INT_MAX__: libc::c_uint = 2147483647;
pub const __LONG_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __WCHAR_MAX__: libc::c_uint = 2147483647;
pub const __INTMAX_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: libc::c_int = -1;
pub const __UINTMAX_MAX__: libc::c_int = -1;
pub const __PTRDIFF_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: libc::c_int = -1;
pub const __SIZEOF_DOUBLE__: libc::c_uint = 8;
pub const __SIZEOF_FLOAT__: libc::c_uint = 4;
pub const __SIZEOF_INT__: libc::c_uint = 4;
pub const __SIZEOF_LONG__: libc::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: libc::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: libc::c_uint = 8;
pub const __SIZEOF_POINTER__: libc::c_uint = 8;
pub const __SIZEOF_SHORT__: libc::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: libc::c_uint = 8;
pub const __SIZEOF_SIZE_T__: libc::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: libc::c_uint = 4;
pub const __SIZEOF_WINT_T__: libc::c_uint = 4;
pub const __SIZEOF_INT128__: libc::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: libc::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: libc::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: libc::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: libc::c_uint = 64;
pub const __WCHAR_WIDTH__: libc::c_uint = 32;
pub const __WINT_WIDTH__: libc::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: libc::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: libc::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: libc::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: libc::c_uint = 64;
pub const __FLT_HAS_DENORM__: libc::c_uint = 1;
pub const __FLT_DIG__: libc::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: libc::c_uint = 9;
pub const __FLT_HAS_INFINITY__: libc::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: libc::c_uint = 1;
pub const __FLT_MANT_DIG__: libc::c_uint = 24;
pub const __FLT_MAX_10_EXP__: libc::c_uint = 38;
pub const __FLT_MAX_EXP__: libc::c_uint = 128;
pub const __FLT_MIN_10_EXP__: libc::c_int = -37;
pub const __FLT_MIN_EXP__: libc::c_int = -125;
pub const __DBL_HAS_DENORM__: libc::c_uint = 1;
pub const __DBL_DIG__: libc::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: libc::c_uint = 17;
pub const __DBL_HAS_INFINITY__: libc::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: libc::c_uint = 1;
pub const __DBL_MANT_DIG__: libc::c_uint = 53;
pub const __DBL_MAX_10_EXP__: libc::c_uint = 308;
pub const __DBL_MAX_EXP__: libc::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: libc::c_int = -307;
pub const __DBL_MIN_EXP__: libc::c_int = -1021;
pub const __LDBL_HAS_DENORM__: libc::c_uint = 1;
pub const __LDBL_DIG__: libc::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: libc::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: libc::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: libc::c_uint = 1;
pub const __LDBL_MANT_DIG__: libc::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: libc::c_uint = 4932;
pub const __LDBL_MAX_EXP__: libc::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: libc::c_int = -4931;
pub const __LDBL_MIN_EXP__: libc::c_int = -16381;
pub const __POINTER_WIDTH__: libc::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: libc::c_uint = 16;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 4usize] = b"lld\x00";
pub const __INT64_FMTi__: &'static [u8; 4usize] = b"lli\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: libc::c_uint = 255;
pub const __INT8_MAX__: libc::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: libc::c_uint = 65535;
pub const __INT16_MAX__: libc::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: libc::c_uint = 4294967295;
pub const __INT32_MAX__: libc::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 4usize] = b"llo\x00";
pub const __UINT64_FMTu__: &'static [u8; 4usize] = b"llu\x00";
pub const __UINT64_FMTx__: &'static [u8; 4usize] = b"llx\x00";
pub const __UINT64_FMTX__: &'static [u8; 4usize] = b"llX\x00";
pub const __UINT64_MAX__: libc::c_int = -1;
pub const __INT64_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: libc::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: libc::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: libc::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: libc::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: libc::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: libc::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: libc::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: libc::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: libc::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: libc::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: libc::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: libc::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: libc::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: libc::c_ulonglong = 9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: libc::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: libc::c_uint = 0;
pub const __GNUC_STDC_INLINE__: libc::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: libc::c_uint = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: libc::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: libc::c_uint = 2;
pub const __NO_INLINE__: libc::c_uint = 1;
pub const __PIC__: libc::c_uint = 2;
pub const __pic__: libc::c_uint = 2;
pub const __FLT_EVAL_METHOD__: libc::c_uint = 0;
pub const __FLT_RADIX__: libc::c_uint = 2;
pub const __DECIMAL_DIG__: libc::c_uint = 21;
pub const __SSP__: libc::c_uint = 1;
pub const __amd64__: libc::c_uint = 1;
pub const __amd64: libc::c_uint = 1;
pub const __x86_64: libc::c_uint = 1;
pub const __x86_64__: libc::c_uint = 1;
pub const __core2: libc::c_uint = 1;
pub const __core2__: libc::c_uint = 1;
pub const __tune_core2__: libc::c_uint = 1;
pub const __NO_MATH_INLINES: libc::c_uint = 1;
pub const __FXSR__: libc::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16: libc::c_uint = 1;
pub const __SSSE3__: libc::c_uint = 1;
pub const __SSE3__: libc::c_uint = 1;
pub const __SSE2__: libc::c_uint = 1;
pub const __SSE2_MATH__: libc::c_uint = 1;
pub const __SSE__: libc::c_uint = 1;
pub const __SSE_MATH__: libc::c_uint = 1;
pub const __MMX__: libc::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: libc::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: libc::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: libc::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: libc::c_uint = 1;
pub const __APPLE_CC__: libc::c_uint = 6000;
pub const __APPLE__: libc::c_uint = 1;
pub const OBJC_NEW_PROPERTIES: libc::c_uint = 1;
pub const __apple_build_version__: libc::c_uint = 8020042;
pub const __DYNAMIC__: libc::c_uint = 1;
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__: libc::c_uint = 1090;
pub const __MACH__: libc::c_uint = 1;
pub const __STDC__: libc::c_uint = 1;
pub const __STDC_HOSTED__: libc::c_uint = 1;
pub const __STDC_VERSION__: libc::c_uint = 201112;
pub const __STDC_UTF_16__: libc::c_uint = 1;
pub const __STDC_UTF_32__: libc::c_uint = 1;
pub const TCOD_SDL2: libc::c_uint = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: libc::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: libc::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: libc::c_uint = 1;
pub const __DARWIN_UNIX03: libc::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: libc::c_uint = 1;
pub const __DARWIN_VERS_1050: libc::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: libc::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: libc::c_uint = 4096;
pub const __DARWIN_C_FULL: libc::c_uint = 900000;
pub const __DARWIN_C_LEVEL: libc::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: libc::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: libc::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: libc::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: libc::c_uint = 3;
pub const __PTHREAD_SIZE__: libc::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: libc::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: libc::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: libc::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: libc::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: libc::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: libc::c_uint = 16;
pub const __DARWIN_WCHAR_MAX: libc::c_uint = 2147483647;
pub const __DARWIN_WCHAR_MIN: libc::c_int = -2147483648;
pub const _FORTIFY_SOURCE: libc::c_uint = 2;
pub const __MAC_10_0: libc::c_uint = 1000;
pub const __MAC_10_1: libc::c_uint = 1010;
pub const __MAC_10_2: libc::c_uint = 1020;
pub const __MAC_10_3: libc::c_uint = 1030;
pub const __MAC_10_4: libc::c_uint = 1040;
pub const __MAC_10_5: libc::c_uint = 1050;
pub const __MAC_10_6: libc::c_uint = 1060;
pub const __MAC_10_7: libc::c_uint = 1070;
pub const __MAC_10_8: libc::c_uint = 1080;
pub const __MAC_10_9: libc::c_uint = 1090;
pub const __MAC_10_10: libc::c_uint = 101000;
pub const __MAC_10_10_2: libc::c_uint = 101002;
pub const __MAC_10_10_3: libc::c_uint = 101003;
pub const __MAC_10_11: libc::c_uint = 101100;
pub const __MAC_10_11_2: libc::c_uint = 101102;
pub const __MAC_10_11_3: libc::c_uint = 101103;
pub const __MAC_10_11_4: libc::c_uint = 101104;
pub const __MAC_10_12: libc::c_uint = 101200;
pub const __MAC_10_12_1: libc::c_uint = 101201;
pub const __MAC_10_12_2: libc::c_uint = 101202;
pub const __MAC_10_12_4: libc::c_uint = 101204;
pub const __IPHONE_2_0: libc::c_uint = 20000;
pub const __IPHONE_2_1: libc::c_uint = 20100;
pub const __IPHONE_2_2: libc::c_uint = 20200;
pub const __IPHONE_3_0: libc::c_uint = 30000;
pub const __IPHONE_3_1: libc::c_uint = 30100;
pub const __IPHONE_3_2: libc::c_uint = 30200;
pub const __IPHONE_4_0: libc::c_uint = 40000;
pub const __IPHONE_4_1: libc::c_uint = 40100;
pub const __IPHONE_4_2: libc::c_uint = 40200;
pub const __IPHONE_4_3: libc::c_uint = 40300;
pub const __IPHONE_5_0: libc::c_uint = 50000;
pub const __IPHONE_5_1: libc::c_uint = 50100;
pub const __IPHONE_6_0: libc::c_uint = 60000;
pub const __IPHONE_6_1: libc::c_uint = 60100;
pub const __IPHONE_7_0: libc::c_uint = 70000;
pub const __IPHONE_7_1: libc::c_uint = 70100;
pub const __IPHONE_8_0: libc::c_uint = 80000;
pub const __IPHONE_8_1: libc::c_uint = 80100;
pub const __IPHONE_8_2: libc::c_uint = 80200;
pub const __IPHONE_8_3: libc::c_uint = 80300;
pub const __IPHONE_8_4: libc::c_uint = 80400;
pub const __IPHONE_9_0: libc::c_uint = 90000;
pub const __IPHONE_9_1: libc::c_uint = 90100;
pub const __IPHONE_9_2: libc::c_uint = 90200;
pub const __IPHONE_9_3: libc::c_uint = 90300;
pub const __IPHONE_10_0: libc::c_uint = 100000;
pub const __IPHONE_10_1: libc::c_uint = 100100;
pub const __IPHONE_10_2: libc::c_uint = 100200;
pub const __IPHONE_10_3: libc::c_uint = 100300;
pub const __TVOS_9_0: libc::c_uint = 90000;
pub const __TVOS_9_1: libc::c_uint = 90100;
pub const __TVOS_9_2: libc::c_uint = 90200;
pub const __TVOS_10_0: libc::c_uint = 100000;
pub const __TVOS_10_0_1: libc::c_uint = 100001;
pub const __TVOS_10_1: libc::c_uint = 100100;
pub const __TVOS_10_2: libc::c_uint = 100200;
pub const __WATCHOS_1_0: libc::c_uint = 10000;
pub const __WATCHOS_2_0: libc::c_uint = 20000;
pub const __WATCHOS_2_1: libc::c_uint = 20100;
pub const __WATCHOS_2_2: libc::c_uint = 20200;
pub const __WATCHOS_3_0: libc::c_uint = 30000;
pub const __WATCHOS_3_1: libc::c_uint = 30100;
pub const __WATCHOS_3_1_1: libc::c_uint = 30101;
pub const __WATCHOS_3_2: libc::c_uint = 30200;
pub const __MAC_OS_X_VERSION_MIN_REQUIRED: libc::c_uint = 1090;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: libc::c_uint = 101204;
pub const WCHAR_MIN: libc::c_int = -2147483648;
pub const WCHAR_MAX: libc::c_uint = 2147483647;
pub const __GNUC_VA_LIST: libc::c_uint = 1;
pub const RENAME_SECLUDE: libc::c_uint = 1;
pub const RENAME_SWAP: libc::c_uint = 2;
pub const RENAME_EXCL: libc::c_uint = 4;
pub const __SLBF: libc::c_uint = 1;
pub const __SNBF: libc::c_uint = 2;
pub const __SRD: libc::c_uint = 4;
pub const __SWR: libc::c_uint = 8;
pub const __SRW: libc::c_uint = 16;
pub const __SEOF: libc::c_uint = 32;
pub const __SERR: libc::c_uint = 64;
pub const __SMBF: libc::c_uint = 128;
pub const __SAPP: libc::c_uint = 256;
pub const __SSTR: libc::c_uint = 512;
pub const __SOPT: libc::c_uint = 1024;
pub const __SNPT: libc::c_uint = 2048;
pub const __SOFF: libc::c_uint = 4096;
pub const __SMOD: libc::c_uint = 8192;
pub const __SALC: libc::c_uint = 16384;
pub const __SIGN: libc::c_uint = 32768;
pub const _IOFBF: libc::c_uint = 0;
pub const _IOLBF: libc::c_uint = 1;
pub const _IONBF: libc::c_uint = 2;
pub const BUFSIZ: libc::c_uint = 1024;
pub const EOF: libc::c_int = -1;
pub const FOPEN_MAX: libc::c_uint = 20;
pub const FILENAME_MAX: libc::c_uint = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\x00";
pub const L_tmpnam: libc::c_uint = 1024;
pub const TMP_MAX: libc::c_uint = 308915776;
pub const SEEK_SET: libc::c_uint = 0;
pub const SEEK_CUR: libc::c_uint = 1;
pub const SEEK_END: libc::c_uint = 2;
pub const L_ctermid: libc::c_uint = 1024;
pub const __CTERMID_DEFINED: libc::c_uint = 1;
pub const _USE_FORTIFY_LEVEL: libc::c_uint = 2;
pub const CLOCKS_PER_SEC: libc::c_uint = 1000000;
pub const _CACHED_RUNES: libc::c_uint = 256;
pub const _CRMASK: libc::c_int = -256;
pub const _RUNE_MAGIC_A: &'static [u8; 9usize] = b"RuneMagA\x00";
pub const _CTYPE_A: libc::c_uint = 256;
pub const _CTYPE_C: libc::c_uint = 512;
pub const _CTYPE_D: libc::c_uint = 1024;
pub const _CTYPE_G: libc::c_uint = 2048;
pub const _CTYPE_L: libc::c_uint = 4096;
pub const _CTYPE_P: libc::c_uint = 8192;
pub const _CTYPE_S: libc::c_uint = 16384;
pub const _CTYPE_U: libc::c_uint = 32768;
pub const _CTYPE_X: libc::c_uint = 65536;
pub const _CTYPE_B: libc::c_uint = 131072;
pub const _CTYPE_R: libc::c_uint = 262144;
pub const _CTYPE_I: libc::c_uint = 524288;
pub const _CTYPE_T: libc::c_uint = 1048576;
pub const _CTYPE_Q: libc::c_uint = 2097152;
pub const _CTYPE_SW0: libc::c_uint = 536870912;
pub const _CTYPE_SW1: libc::c_uint = 1073741824;
pub const _CTYPE_SW2: libc::c_uint = 2147483648;
pub const _CTYPE_SW3: libc::c_uint = 3221225472;
pub const _CTYPE_SWM: libc::c_uint = 3758096384;
pub const _CTYPE_SWS: libc::c_uint = 30;
pub const __DARWIN_CLK_TCK: libc::c_uint = 100;
pub const CHAR_BIT: libc::c_uint = 8;
pub const MB_LEN_MAX: libc::c_uint = 6;
pub const CLK_TCK: libc::c_uint = 100;
pub const SCHAR_MAX: libc::c_uint = 127;
pub const SCHAR_MIN: libc::c_int = -128;
pub const UCHAR_MAX: libc::c_uint = 255;
pub const CHAR_MAX: libc::c_uint = 127;
pub const CHAR_MIN: libc::c_int = -128;
pub const USHRT_MAX: libc::c_uint = 65535;
pub const SHRT_MAX: libc::c_uint = 32767;
pub const SHRT_MIN: libc::c_int = -32768;
pub const UINT_MAX: libc::c_uint = 4294967295;
pub const INT_MAX: libc::c_uint = 2147483647;
pub const INT_MIN: libc::c_int = -2147483648;
pub const ULONG_MAX: libc::c_int = -1;
pub const LONG_MAX: libc::c_ulonglong = 9223372036854775807;
pub const LONG_MIN: libc::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: libc::c_int = -1;
pub const LLONG_MAX: libc::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: libc::c_longlong = -9223372036854775808;
pub const LONG_BIT: libc::c_uint = 64;
pub const SSIZE_MAX: libc::c_ulonglong = 9223372036854775807;
pub const WORD_BIT: libc::c_uint = 32;
pub const SIZE_T_MAX: libc::c_int = -1;
pub const UQUAD_MAX: libc::c_int = -1;
pub const QUAD_MAX: libc::c_ulonglong = 9223372036854775807;
pub const QUAD_MIN: libc::c_longlong = -9223372036854775808;
pub const ARG_MAX: libc::c_uint = 262144;
pub const CHILD_MAX: libc::c_uint = 266;
pub const GID_MAX: libc::c_uint = 2147483647;
pub const LINK_MAX: libc::c_uint = 32767;
pub const MAX_CANON: libc::c_uint = 1024;
pub const MAX_INPUT: libc::c_uint = 1024;
pub const NAME_MAX: libc::c_uint = 255;
pub const NGROUPS_MAX: libc::c_uint = 16;
pub const UID_MAX: libc::c_uint = 2147483647;
pub const OPEN_MAX: libc::c_uint = 10240;
pub const PATH_MAX: libc::c_uint = 1024;
pub const PIPE_BUF: libc::c_uint = 512;
pub const BC_BASE_MAX: libc::c_uint = 99;
pub const BC_DIM_MAX: libc::c_uint = 2048;
pub const BC_SCALE_MAX: libc::c_uint = 99;
pub const BC_STRING_MAX: libc::c_uint = 1000;
pub const CHARCLASS_NAME_MAX: libc::c_uint = 14;
pub const COLL_WEIGHTS_MAX: libc::c_uint = 2;
pub const EQUIV_CLASS_MAX: libc::c_uint = 2;
pub const EXPR_NEST_MAX: libc::c_uint = 32;
pub const LINE_MAX: libc::c_uint = 2048;
pub const RE_DUP_MAX: libc::c_uint = 255;
pub const NZERO: libc::c_uint = 20;
pub const _POSIX_ARG_MAX: libc::c_uint = 4096;
pub const _POSIX_CHILD_MAX: libc::c_uint = 25;
pub const _POSIX_LINK_MAX: libc::c_uint = 8;
pub const _POSIX_MAX_CANON: libc::c_uint = 255;
pub const _POSIX_MAX_INPUT: libc::c_uint = 255;
pub const _POSIX_NAME_MAX: libc::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: libc::c_uint = 8;
pub const _POSIX_OPEN_MAX: libc::c_uint = 20;
pub const _POSIX_PATH_MAX: libc::c_uint = 256;
pub const _POSIX_PIPE_BUF: libc::c_uint = 512;
pub const _POSIX_SSIZE_MAX: libc::c_uint = 32767;
pub const _POSIX_STREAM_MAX: libc::c_uint = 8;
pub const _POSIX_TZNAME_MAX: libc::c_uint = 6;
pub const _POSIX2_BC_BASE_MAX: libc::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: libc::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: libc::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: libc::c_uint = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: libc::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: libc::c_uint = 32;
pub const _POSIX2_LINE_MAX: libc::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: libc::c_uint = 255;
pub const _POSIX_AIO_LISTIO_MAX: libc::c_uint = 2;
pub const _POSIX_AIO_MAX: libc::c_uint = 1;
pub const _POSIX_DELAYTIMER_MAX: libc::c_uint = 32;
pub const _POSIX_MQ_OPEN_MAX: libc::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: libc::c_uint = 32;
pub const _POSIX_RTSIG_MAX: libc::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: libc::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: libc::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: libc::c_uint = 32;
pub const _POSIX_TIMER_MAX: libc::c_uint = 32;
pub const _POSIX_CLOCKRES_MIN: libc::c_uint = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: libc::c_uint = 4;
pub const _POSIX_THREAD_KEYS_MAX: libc::c_uint = 128;
pub const _POSIX_THREAD_THREADS_MAX: libc::c_uint = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: libc::c_uint = 4;
pub const PTHREAD_KEYS_MAX: libc::c_uint = 512;
pub const PTHREAD_STACK_MIN: libc::c_uint = 8192;
pub const _POSIX_HOST_NAME_MAX: libc::c_uint = 255;
pub const _POSIX_LOGIN_NAME_MAX: libc::c_uint = 9;
pub const _POSIX_SS_REPL_MAX: libc::c_uint = 4;
pub const _POSIX_SYMLINK_MAX: libc::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: libc::c_uint = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: libc::c_uint = 30;
pub const _POSIX_TRACE_NAME_MAX: libc::c_uint = 8;
pub const _POSIX_TRACE_SYS_MAX: libc::c_uint = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: libc::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: libc::c_uint = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: libc::c_uint = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: libc::c_uint = 2;
pub const _POSIX_RE_DUP_MAX: libc::c_uint = 255;
pub const OFF_MIN: libc::c_longlong = -9223372036854775808;
pub const OFF_MAX: libc::c_ulonglong = 9223372036854775807;
pub const PASS_MAX: libc::c_uint = 128;
pub const NL_ARGMAX: libc::c_uint = 9;
pub const NL_LANGMAX: libc::c_uint = 14;
pub const NL_MSGMAX: libc::c_uint = 32767;
pub const NL_NMAX: libc::c_uint = 1;
pub const NL_SETMAX: libc::c_uint = 255;
pub const NL_TEXTMAX: libc::c_uint = 2048;
pub const _XOPEN_IOV_MAX: libc::c_uint = 16;
pub const IOV_MAX: libc::c_uint = 1024;
pub const _XOPEN_NAME_MAX: libc::c_uint = 255;
pub const _XOPEN_PATH_MAX: libc::c_uint = 1024;
pub const LONG_LONG_MAX: libc::c_ulonglong = 9223372036854775807;
pub const LONG_LONG_MIN: libc::c_longlong = -9223372036854775808;
pub const ULONG_LONG_MAX: libc::c_int = -1;
pub const __DARWIN_NSIG: libc::c_uint = 32;
pub const NSIG: libc::c_uint = 32;
pub const _I386_SIGNAL_H_: libc::c_uint = 1;
pub const SIGHUP: libc::c_uint = 1;
pub const SIGINT: libc::c_uint = 2;
pub const SIGQUIT: libc::c_uint = 3;
pub const SIGILL: libc::c_uint = 4;
pub const SIGTRAP: libc::c_uint = 5;
pub const SIGABRT: libc::c_uint = 6;
pub const SIGIOT: libc::c_uint = 6;
pub const SIGEMT: libc::c_uint = 7;
pub const SIGFPE: libc::c_uint = 8;
pub const SIGKILL: libc::c_uint = 9;
pub const SIGBUS: libc::c_uint = 10;
pub const SIGSEGV: libc::c_uint = 11;
pub const SIGSYS: libc::c_uint = 12;
pub const SIGPIPE: libc::c_uint = 13;
pub const SIGALRM: libc::c_uint = 14;
pub const SIGTERM: libc::c_uint = 15;
pub const SIGURG: libc::c_uint = 16;
pub const SIGSTOP: libc::c_uint = 17;
pub const SIGTSTP: libc::c_uint = 18;
pub const SIGCONT: libc::c_uint = 19;
pub const SIGCHLD: libc::c_uint = 20;
pub const SIGTTIN: libc::c_uint = 21;
pub const SIGTTOU: libc::c_uint = 22;
pub const SIGIO: libc::c_uint = 23;
pub const SIGXCPU: libc::c_uint = 24;
pub const SIGXFSZ: libc::c_uint = 25;
pub const SIGVTALRM: libc::c_uint = 26;
pub const SIGPROF: libc::c_uint = 27;
pub const SIGWINCH: libc::c_uint = 28;
pub const SIGINFO: libc::c_uint = 29;
pub const SIGUSR1: libc::c_uint = 30;
pub const SIGUSR2: libc::c_uint = 31;
pub const FP_PREC_24B: libc::c_uint = 0;
pub const FP_PREC_53B: libc::c_uint = 2;
pub const FP_PREC_64B: libc::c_uint = 3;
pub const FP_RND_NEAR: libc::c_uint = 0;
pub const FP_RND_DOWN: libc::c_uint = 1;
pub const FP_RND_UP: libc::c_uint = 2;
pub const FP_CHOP: libc::c_uint = 3;
pub const FP_STATE_BYTES: libc::c_uint = 512;
pub const SIGEV_NONE: libc::c_uint = 0;
pub const SIGEV_SIGNAL: libc::c_uint = 1;
pub const SIGEV_THREAD: libc::c_uint = 3;
pub const ILL_NOOP: libc::c_uint = 0;
pub const ILL_ILLOPC: libc::c_uint = 1;
pub const ILL_ILLTRP: libc::c_uint = 2;
pub const ILL_PRVOPC: libc::c_uint = 3;
pub const ILL_ILLOPN: libc::c_uint = 4;
pub const ILL_ILLADR: libc::c_uint = 5;
pub const ILL_PRVREG: libc::c_uint = 6;
pub const ILL_COPROC: libc::c_uint = 7;
pub const ILL_BADSTK: libc::c_uint = 8;
pub const FPE_NOOP: libc::c_uint = 0;
pub const FPE_FLTDIV: libc::c_uint = 1;
pub const FPE_FLTOVF: libc::c_uint = 2;
pub const FPE_FLTUND: libc::c_uint = 3;
pub const FPE_FLTRES: libc::c_uint = 4;
pub const FPE_FLTINV: libc::c_uint = 5;
pub const FPE_FLTSUB: libc::c_uint = 6;
pub const FPE_INTDIV: libc::c_uint = 7;
pub const FPE_INTOVF: libc::c_uint = 8;
pub const SEGV_NOOP: libc::c_uint = 0;
pub const SEGV_MAPERR: libc::c_uint = 1;
pub const SEGV_ACCERR: libc::c_uint = 2;
pub const BUS_NOOP: libc::c_uint = 0;
pub const BUS_ADRALN: libc::c_uint = 1;
pub const BUS_ADRERR: libc::c_uint = 2;
pub const BUS_OBJERR: libc::c_uint = 3;
pub const TRAP_BRKPT: libc::c_uint = 1;
pub const TRAP_TRACE: libc::c_uint = 2;
pub const CLD_NOOP: libc::c_uint = 0;
pub const CLD_EXITED: libc::c_uint = 1;
pub const CLD_KILLED: libc::c_uint = 2;
pub const CLD_DUMPED: libc::c_uint = 3;
pub const CLD_TRAPPED: libc::c_uint = 4;
pub const CLD_STOPPED: libc::c_uint = 5;
pub const CLD_CONTINUED: libc::c_uint = 6;
pub const POLL_IN: libc::c_uint = 1;
pub const POLL_OUT: libc::c_uint = 2;
pub const POLL_MSG: libc::c_uint = 3;
pub const POLL_ERR: libc::c_uint = 4;
pub const POLL_PRI: libc::c_uint = 5;
pub const POLL_HUP: libc::c_uint = 6;
pub const SA_ONSTACK: libc::c_uint = 1;
pub const SA_RESTART: libc::c_uint = 2;
pub const SA_RESETHAND: libc::c_uint = 4;
pub const SA_NOCLDSTOP: libc::c_uint = 8;
pub const SA_NODEFER: libc::c_uint = 16;
pub const SA_NOCLDWAIT: libc::c_uint = 32;
pub const SA_SIGINFO: libc::c_uint = 64;
pub const SA_USERTRAMP: libc::c_uint = 256;
pub const SA_64REGSET: libc::c_uint = 512;
pub const SA_USERSPACE_MASK: libc::c_uint = 127;
pub const SIG_BLOCK: libc::c_uint = 1;
pub const SIG_UNBLOCK: libc::c_uint = 2;
pub const SIG_SETMASK: libc::c_uint = 3;
pub const SI_USER: libc::c_uint = 65537;
pub const SI_QUEUE: libc::c_uint = 65538;
pub const SI_TIMER: libc::c_uint = 65539;
pub const SI_ASYNCIO: libc::c_uint = 65540;
pub const SI_MESGQ: libc::c_uint = 65541;
pub const SS_ONSTACK: libc::c_uint = 1;
pub const SS_DISABLE: libc::c_uint = 4;
pub const MINSIGSTKSZ: libc::c_uint = 32768;
pub const SIGSTKSZ: libc::c_uint = 131072;
pub const SV_ONSTACK: libc::c_uint = 1;
pub const SV_INTERRUPT: libc::c_uint = 2;
pub const SV_RESETHAND: libc::c_uint = 4;
pub const SV_NODEFER: libc::c_uint = 16;
pub const SV_NOCLDSTOP: libc::c_uint = 8;
pub const SV_SIGINFO: libc::c_uint = 64;
pub const __WORDSIZE: libc::c_uint = 64;
pub const INT8_MAX: libc::c_uint = 127;
pub const INT16_MAX: libc::c_uint = 32767;
pub const INT32_MAX: libc::c_uint = 2147483647;
pub const INT64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: libc::c_int = -128;
pub const INT16_MIN: libc::c_int = -32768;
pub const INT32_MIN: libc::c_int = -2147483648;
pub const INT64_MIN: libc::c_longlong = -9223372036854775808;
pub const UINT8_MAX: libc::c_uint = 255;
pub const UINT16_MAX: libc::c_uint = 65535;
pub const UINT32_MAX: libc::c_uint = 4294967295;
pub const UINT64_MAX: libc::c_int = -1;
pub const INT_LEAST8_MIN: libc::c_int = -128;
pub const INT_LEAST16_MIN: libc::c_int = -32768;
pub const INT_LEAST32_MIN: libc::c_int = -2147483648;
pub const INT_LEAST64_MIN: libc::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: libc::c_uint = 127;
pub const INT_LEAST16_MAX: libc::c_uint = 32767;
pub const INT_LEAST32_MAX: libc::c_uint = 2147483647;
pub const INT_LEAST64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: libc::c_uint = 255;
pub const UINT_LEAST16_MAX: libc::c_uint = 65535;
pub const UINT_LEAST32_MAX: libc::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: libc::c_int = -1;
pub const INT_FAST8_MIN: libc::c_int = -128;
pub const INT_FAST16_MIN: libc::c_int = -32768;
pub const INT_FAST32_MIN: libc::c_int = -2147483648;
pub const INT_FAST64_MIN: libc::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: libc::c_uint = 127;
pub const INT_FAST16_MAX: libc::c_uint = 32767;
pub const INT_FAST32_MAX: libc::c_uint = 2147483647;
pub const INT_FAST64_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: libc::c_uint = 255;
pub const UINT_FAST16_MAX: libc::c_uint = 65535;
pub const UINT_FAST32_MAX: libc::c_uint = 4294967295;
pub const UINT_FAST64_MAX: libc::c_int = -1;
pub const INTPTR_MIN: libc::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: libc::c_int = -1;
pub const INTMAX_MIN: libc::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: libc::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: libc::c_int = -1;
pub const PTRDIFF_MIN: libc::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: libc::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: libc::c_int = -1;
pub const RSIZE_MAX: libc::c_int = -1;
pub const WINT_MIN: libc::c_int = -2147483648;
pub const WINT_MAX: libc::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: libc::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: libc::c_uint = 2147483647;
pub const PRINTF_INT64_MODIFIER: &'static [u8; 3usize] = b"ll\x00";
pub const PRINTF_INT32_MODIFIER: &'static [u8; 1usize] = b"\x00";
pub const PRINTF_INT16_MODIFIER: &'static [u8; 2usize] = b"h\x00";
pub const PRINTF_INTMAX_MODIFIER: &'static [u8; 3usize] = b"ll\x00";
pub const PRINTF_INT64_HEX_WIDTH: &'static [u8; 3usize] = b"16\x00";
pub const PRINTF_UINT64_HEX_WIDTH: &'static [u8; 3usize] = b"16\x00";
pub const PRINTF_INT32_HEX_WIDTH: &'static [u8; 2usize] = b"8\x00";
pub const PRINTF_UINT32_HEX_WIDTH: &'static [u8; 2usize] = b"8\x00";
pub const PRINTF_INT16_HEX_WIDTH: &'static [u8; 2usize] = b"4\x00";
pub const PRINTF_UINT16_HEX_WIDTH: &'static [u8; 2usize] = b"4\x00";
pub const PRINTF_INT8_HEX_WIDTH: &'static [u8; 2usize] = b"2\x00";
pub const PRINTF_UINT8_HEX_WIDTH: &'static [u8; 2usize] = b"2\x00";
pub const PRINTF_INT64_DEC_WIDTH: &'static [u8; 3usize] = b"19\x00";
pub const PRINTF_UINT64_DEC_WIDTH: &'static [u8; 3usize] = b"20\x00";
pub const PRINTF_INT32_DEC_WIDTH: &'static [u8; 3usize] = b"10\x00";
pub const PRINTF_UINT32_DEC_WIDTH: &'static [u8; 3usize] = b"10\x00";
pub const PRINTF_INT16_DEC_WIDTH: &'static [u8; 2usize] = b"5\x00";
pub const PRINTF_UINT16_DEC_WIDTH: &'static [u8; 2usize] = b"5\x00";
pub const PRINTF_INT8_DEC_WIDTH: &'static [u8; 2usize] = b"3\x00";
pub const PRINTF_UINT8_DEC_WIDTH: &'static [u8; 2usize] = b"3\x00";
pub const PRINTF_INTMAX_HEX_WIDTH: &'static [u8; 3usize] = b"16\x00";
pub const PRINTF_UINTMAX_HEX_WIDTH: &'static [u8; 3usize] = b"16\x00";
pub const PRINTF_INTMAX_DEC_WIDTH: &'static [u8; 3usize] = b"20\x00";
pub const PRINTF_UINTMAX_DEC_WIDTH: &'static [u8; 3usize] = b"20\x00";
pub const true_: libc::c_uint = 1;
pub const false_: libc::c_uint = 0;
pub const __bool_true_false_are_defined: libc::c_uint = 1;
pub const TCOD_HEXVERSION: libc::c_uint = 67075;
pub const TCOD_STRVERSION: &'static [u8; 6usize] = b"1.6.3\x00";
pub const TCOD_TECHVERSION: libc::c_uint = 17171200;
pub const TCOD_STRVERSIONNAME: &'static [u8; 14usize] = b"libtcod 1.6.3\x00";
pub const TCOD_KEY_TEXT_SIZE: libc::c_uint = 32;
pub const TCOD_NOISE_MAX_OCTAVES: libc::c_uint = 128;
pub const TCOD_NOISE_MAX_DIMENSIONS: libc::c_uint = 4;
pub const TCOD_NOISE_DEFAULT_HURST: f64 = 0.5;
pub const TCOD_NOISE_DEFAULT_LACUNARITY: f64 = 2.;
pub const TCOD_LEX_FLAG_NOCASE: libc::c_uint = 1;
pub const TCOD_LEX_FLAG_NESTING_COMMENT: libc::c_uint = 2;
pub const TCOD_LEX_FLAG_TOKENIZE_COMMENTS: libc::c_uint = 4;
pub const TCOD_LEX_ERROR: libc::c_int = -1;
pub const TCOD_LEX_UNKNOWN: libc::c_uint = 0;
pub const TCOD_LEX_SYMBOL: libc::c_uint = 1;
pub const TCOD_LEX_KEYWORD: libc::c_uint = 2;
pub const TCOD_LEX_IDEN: libc::c_uint = 3;
pub const TCOD_LEX_STRING: libc::c_uint = 4;
pub const TCOD_LEX_INTEGER: libc::c_uint = 5;
pub const TCOD_LEX_FLOAT: libc::c_uint = 6;
pub const TCOD_LEX_CHAR: libc::c_uint = 7;
pub const TCOD_LEX_EOF: libc::c_uint = 8;
pub const TCOD_LEX_COMMENT: libc::c_uint = 9;
pub const TCOD_LEX_MAX_SYMBOLS: libc::c_uint = 100;
pub const TCOD_LEX_SYMBOL_SIZE: libc::c_uint = 5;
pub const TCOD_LEX_MAX_KEYWORDS: libc::c_uint = 100;
pub const TCOD_LEX_KEYWORD_SIZE: libc::c_uint = 20;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_longlong;
pub type __uint64_t = libc::c_ulonglong;
pub type __darwin_intptr_t = libc::c_long;
pub type __darwin_natural_t = libc::c_uint;
pub type __darwin_ct_rune_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[libc::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<libc::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = libc::c_long;
pub type __darwin_size_t = libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = libc::c_int;
pub type __darwin_clock_t = libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = libc::c_long;
pub type __darwin_time_t = libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = libc::c_uint;
pub type __darwin_fsfilcnt_t = libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [libc::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut libc::c_void)>,
    pub __arg: *mut libc::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: libc::c_long,
    pub __opaque: [libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: libc::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [libc::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
impl Default for _opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = libc::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = libc::c_int;
pub type __darwin_wctrans_t = libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type mbstate_t = __darwin_mbstate_t;
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn renameat(arg1: libc::c_int, arg2: *const libc::c_char,
                    arg3: libc::c_int, arg4: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn renamex_np(arg1: *const libc::c_char, arg2: *const libc::c_char,
                      arg3: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn renameatx_np(arg1: libc::c_int, arg2: *const libc::c_char,
                        arg3: libc::c_int, arg4: *const libc::c_char,
                        arg5: libc::c_uint) -> libc::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sbuf {
    pub _base: *mut libc::c_uchar,
    pub _size: libc::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(::std::mem::size_of::<__sbuf>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __sbuf ) ));
    assert_eq! (::std::mem::align_of::<__sbuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _base as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _size ) ));
}
impl Clone for __sbuf {
    fn clone(&self) -> Self { *self }
}
impl Default for __sbuf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sFILE {
    pub _p: *mut libc::c_uchar,
    pub _r: libc::c_int,
    pub _w: libc::c_int,
    pub _flags: libc::c_short,
    pub _file: libc::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: libc::c_int,
    pub _cookie: *mut libc::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut libc::c_void)
                                          -> libc::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut libc::c_void,
                                                          arg2:
                                                              *mut libc::c_char,
                                                          arg3: libc::c_int)
                                         -> libc::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut libc::c_void,
                                                          arg2: fpos_t,
                                                          arg3: libc::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut libc::c_void,
                                                           arg2:
                                                               *const libc::c_char,
                                                           arg3: libc::c_int)
                                          -> libc::c_int>,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: libc::c_int,
    pub _ubuf: [libc::c_uchar; 3usize],
    pub _nbuf: [libc::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: libc::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(::std::mem::size_of::<__sFILE>() , 152usize , concat ! (
               "Size of: " , stringify ! ( __sFILE ) ));
    assert_eq! (::std::mem::align_of::<__sFILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sFILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _p as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _p ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _r as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _r ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _w as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _file as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _bf as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _bf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lbfsize as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lbfsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _cookie as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _cookie ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _close as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _close ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _read as * const _ as usize
                } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _seek as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _seek ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _write as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ub as * const _ as usize }
                , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ub ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _extra as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _extra ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ur as * const _ as usize }
                , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ubuf as * const _ as usize
                } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ubuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _nbuf as * const _ as usize
                } , 119usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _nbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lb as * const _ as usize }
                , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _blksize as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _offset ) ));
}
impl Clone for __sFILE {
    fn clone(&self) -> Self { *self }
}
impl Default for __sFILE {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fgets(arg1: *mut libc::c_char, arg2: libc::c_int, arg3: *mut FILE)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn fopen(__filename: *const libc::c_char, __mode: *const libc::c_char)
     -> *mut FILE;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn fputc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const libc::c_char, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut libc::c_void, __size: usize, __nitems: usize,
                 __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn freopen(arg1: *const libc::c_char, arg2: *const libc::c_char,
                   arg3: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: libc::c_long, arg3: libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> libc::c_long;
}
extern "C" {
    pub fn fwrite(__ptr: *const libc::c_void, __size: usize, __nitems: usize,
                  __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar() -> libc::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn perror(arg1: *const libc::c_char);
}
extern "C" {
    pub fn printf(arg1: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn putc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn puts(arg1: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn remove(arg1: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rename(__old: *const libc::c_char, __new: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut libc::c_char);
}
extern "C" {
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut libc::c_char,
                   arg3: libc::c_int, arg4: usize) -> libc::c_int;
}
extern "C" {
    pub fn sprintf(arg1: *mut libc::c_char, arg2: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn sscanf(arg1: *const libc::c_char, arg2: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn ungetc(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const libc::c_char,
                    arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const libc::c_char, arg2: *mut __va_list_tag)
     -> libc::c_int;
}
extern "C" {
    pub fn vsprintf(arg1: *mut libc::c_char, arg2: *const libc::c_char,
                    arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn fdopen(arg1: libc::c_int, arg2: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn popen(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const libc::c_char,
                      arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> libc::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putw(arg1: libc::c_int, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn tempnam(__dir: *const libc::c_char, __prefix: *const libc::c_char)
     -> *mut libc::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __offset: off_t, __whence: libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(__str: *mut libc::c_char, __size: usize,
                    __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfscanf(__stream: *mut FILE, __format: *const libc::c_char,
                   arg1: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const libc::c_char, arg1: *mut __va_list_tag)
     -> libc::c_int;
}
extern "C" {
    pub fn vsnprintf(__str: *mut libc::c_char, __size: usize,
                     __format: *const libc::c_char, arg1: *mut __va_list_tag)
     -> libc::c_int;
}
extern "C" {
    pub fn vsscanf(__str: *const libc::c_char, __format: *const libc::c_char,
                   arg1: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn dprintf(arg1: libc::c_int, arg2: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn vdprintf(arg1: libc::c_int, arg2: *const libc::c_char,
                    arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn getdelim(__linep: *mut *mut libc::c_char, __linecapp: *mut usize,
                    __delimiter: libc::c_int, __stream: *mut FILE) -> isize;
}
extern "C" {
    pub fn getline(__linep: *mut *mut libc::c_char, __linecapp: *mut usize,
                   __stream: *mut FILE) -> isize;
}
extern "C" {
    pub static sys_nerr: libc::c_int;
}
extern "C" {
    pub static mut sys_errlist: [*const libc::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(arg1: *mut *mut libc::c_char,
                    arg2: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut libc::c_char;
}
extern "C" {
    pub fn fmtcheck(arg1: *const libc::c_char, arg2: *const libc::c_char)
     -> *const libc::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut libc::c_char,
                     arg3: libc::c_int);
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn vasprintf(arg1: *mut *mut libc::c_char, arg2: *const libc::c_char,
                     arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn zopen(arg1: *const libc::c_char, arg2: *const libc::c_char,
                 arg3: libc::c_int) -> *mut FILE;
}
extern "C" {
    pub fn funopen(arg1: *const libc::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut libc::c_void,
                                                                  arg2:
                                                                      *mut libc::c_char,
                                                                  arg3:
                                                                      libc::c_int)
                                                 -> libc::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut libc::c_void,
                                                                  arg2:
                                                                      *const libc::c_char,
                                                                  arg3:
                                                                      libc::c_int)
                                                 -> libc::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut libc::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      libc::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut libc::c_void)
                                                 -> libc::c_int>)
     -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(arg1: *mut libc::c_char, arg2: libc::c_int,
                         arg3: usize, arg4: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn __snprintf_chk(arg1: *mut libc::c_char, arg2: usize,
                          arg3: libc::c_int, arg4: usize,
                          arg5: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(arg1: *mut libc::c_char, arg2: libc::c_int,
                          arg3: usize, arg4: *const libc::c_char,
                          arg5: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(arg1: *mut libc::c_char, arg2: usize,
                           arg3: libc::c_int, arg4: usize,
                           arg5: *const libc::c_char,
                           arg6: *mut __va_list_tag) -> libc::c_int;
}
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: libc::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct tm {
    pub tm_sec: libc::c_int,
    pub tm_min: libc::c_int,
    pub tm_hour: libc::c_int,
    pub tm_mday: libc::c_int,
    pub tm_mon: libc::c_int,
    pub tm_year: libc::c_int,
    pub tm_wday: libc::c_int,
    pub tm_yday: libc::c_int,
    pub tm_isdst: libc::c_int,
    pub tm_gmtoff: libc::c_long,
    pub tm_zone: *mut libc::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize , concat ! (
               "Size of: " , stringify ! ( tm ) ));
    assert_eq! (::std::mem::align_of::<tm>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_hour ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mon ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_year ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_wday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_yday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_isdst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_gmtoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_zone ) ));
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
impl Default for tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut tzname: [*mut libc::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: libc::c_int;
}
extern "C" {
    pub static mut timezone: libc::c_long;
}
extern "C" {
    pub static mut daylight: libc::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut libc::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const libc::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(arg1: *mut libc::c_char, arg2: usize,
                    arg3: *const libc::c_char, arg4: *const tm) -> usize;
}
extern "C" {
    pub fn strptime(arg1: *const libc::c_char, arg2: *const libc::c_char,
                    arg3: *mut tm) -> *mut libc::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(arg1: *const tm, arg2: *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn ctime_r(arg1: *const time_t, arg2: *mut libc::c_char)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *const tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *const tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec)
     -> libc::c_int;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum clockid_t {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16,
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> libc::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> libc::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> libc::c_int;
}
pub type wint_t = __darwin_wint_t;
pub type wctype_t = __darwin_wctype_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(::std::mem::size_of::<_RuneEntry>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _RuneEntry ) ));
    assert_eq! (::std::mem::align_of::<_RuneEntry>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _RuneEntry ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneEntry ) ) . __min as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneEntry ) , "::" ,
                stringify ! ( __min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneEntry ) ) . __max as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneEntry ) , "::" ,
                stringify ! ( __max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneEntry ) ) . __map as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneEntry ) , "::" ,
                stringify ! ( __map ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneEntry ) ) . __types as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneEntry ) , "::" ,
                stringify ! ( __types ) ));
}
impl Clone for _RuneEntry {
    fn clone(&self) -> Self { *self }
}
impl Default for _RuneEntry {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _RuneRange {
    pub __nranges: libc::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(::std::mem::size_of::<_RuneRange>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _RuneRange ) ));
    assert_eq! (::std::mem::align_of::<_RuneRange>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _RuneRange ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneRange ) ) . __nranges as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneRange ) , "::" ,
                stringify ! ( __nranges ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneRange ) ) . __ranges as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneRange ) , "::" ,
                stringify ! ( __ranges ) ));
}
impl Clone for _RuneRange {
    fn clone(&self) -> Self { *self }
}
impl Default for _RuneRange {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct _RuneCharClass {
    pub __name: [libc::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(::std::mem::size_of::<_RuneCharClass>() , 20usize , concat ! (
               "Size of: " , stringify ! ( _RuneCharClass ) ));
    assert_eq! (::std::mem::align_of::<_RuneCharClass>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _RuneCharClass ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneCharClass ) ) . __name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneCharClass ) , "::"
                , stringify ! ( __name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneCharClass ) ) . __mask as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneCharClass ) , "::"
                , stringify ! ( __mask ) ));
}
impl Clone for _RuneCharClass {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _RuneLocale {
    pub __magic: [libc::c_char; 8usize],
    pub __encoding: [libc::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *const libc::c_char,
                                                               arg2:
                                                                   __darwin_size_t,
                                                               arg3:
                                                                   *mut *const libc::c_char)
                                              -> __darwin_rune_t>,
    pub __sputrune: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   __darwin_rune_t,
                                                               arg2:
                                                                   *mut libc::c_char,
                                                               arg3:
                                                                   __darwin_size_t,
                                                               arg4:
                                                                   *mut *mut libc::c_char)
                                              -> libc::c_int>,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut libc::c_void,
    pub __variable_len: libc::c_int,
    pub __ncharclasses: libc::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(::std::mem::size_of::<_RuneLocale>() , 3208usize , concat ! (
               "Size of: " , stringify ! ( _RuneLocale ) ));
    assert_eq! (::std::mem::align_of::<_RuneLocale>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _RuneLocale ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __magic as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __magic ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __encoding as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __encoding ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __sgetrune as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __sgetrune ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __sputrune as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __sputrune ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __invalid_rune as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __invalid_rune ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __runetype as * const _
                as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __runetype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __maplower as * const _
                as usize } , 1084usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __maplower ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __mapupper as * const _
                as usize } , 2108usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __mapupper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __runetype_ext as *
                const _ as usize } , 3136usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __runetype_ext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __maplower_ext as *
                const _ as usize } , 3152usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __maplower_ext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __mapupper_ext as *
                const _ as usize } , 3168usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __mapupper_ext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __variable as * const _
                as usize } , 3184usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __variable ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __variable_len as *
                const _ as usize } , 3192usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __variable_len ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __ncharclasses as *
                const _ as usize } , 3196usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __ncharclasses ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _RuneLocale ) ) . __charclasses as *
                const _ as usize } , 3200usize , concat ! (
                "Alignment of field: " , stringify ! ( _RuneLocale ) , "::" ,
                stringify ! ( __charclasses ) ));
}
impl Default for _RuneLocale {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> libc::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(arg1: __darwin_ct_rune_t, arg2: libc::c_ulong)
     -> libc::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn wctype(arg1: *const libc::c_char) -> wctype_t;
}
extern "C" {
    pub fn btowc(arg1: libc::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut wchar_t, arg2: libc::c_int, arg3: *mut FILE)
     -> *mut wchar_t;
}
extern "C" {
    pub fn fputwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const wchar_t, arg2: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const wchar_t, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const libc::c_char, arg2: usize,
                  arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(arg1: *mut wchar_t, arg2: *const libc::c_char, arg3: usize,
                   arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> libc::c_int;
}
extern "C" {
    pub fn mbsrtowcs(arg1: *mut wchar_t, arg2: *mut *const libc::c_char,
                     arg3: usize, arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn putwc(arg1: wchar_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: wchar_t) -> wint_t;
}
extern "C" {
    pub fn swprintf(arg1: *mut wchar_t, arg2: usize,
                    arg3: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const wchar_t, arg2: *const wchar_t, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(arg1: *mut FILE, arg2: *const wchar_t,
                     arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vswprintf(arg1: *mut wchar_t, arg2: usize, arg3: *const wchar_t,
                     arg4: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const wchar_t, arg2: *mut __va_list_tag)
     -> libc::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut libc::c_char, arg2: wchar_t,
                   arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(arg1: *const wchar_t, arg2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const wchar_t, arg2: *const wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsftime(arg1: *mut wchar_t, arg2: usize, arg3: *const wchar_t,
                    arg4: *const tm) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsncat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: usize)
     -> libc::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(arg1: *const wchar_t, arg2: *const wchar_t)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(arg1: *const wchar_t, arg2: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrtombs(arg1: *mut libc::c_char, arg2: *mut *const wchar_t,
                     arg3: usize, arg4: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const wchar_t, arg2: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> libc::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstok(arg1: *mut wchar_t, arg2: *const wchar_t,
                  arg3: *mut *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstol(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                  arg3: libc::c_int) -> libc::c_long;
}
extern "C" {
    pub fn wcstoul(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: libc::c_int) -> libc::c_ulong;
}
extern "C" {
    pub fn wmemchr(arg1: *const wchar_t, arg2: wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemcmp(arg1: *const wchar_t, arg2: *const wchar_t, arg3: usize)
     -> libc::c_int;
}
extern "C" {
    pub fn wmemcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemmove(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wmemset(arg1: *mut wchar_t, arg2: wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wprintf(arg1: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const wchar_t, ...) -> libc::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const wchar_t, arg2: usize) -> libc::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn vfwscanf(arg1: *mut FILE, arg2: *const wchar_t,
                    arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vswscanf(arg1: *const wchar_t, arg2: *const wchar_t,
                    arg3: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const wchar_t, arg2: *mut __va_list_tag)
     -> libc::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const wchar_t, arg2: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstoll(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                   arg3: libc::c_int) -> libc::c_longlong;
}
extern "C" {
    pub fn wcstoull(arg1: *const wchar_t, arg2: *mut *mut wchar_t,
                    arg3: libc::c_int) -> libc::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(arg1: *mut wchar_t, arg2: *mut *const libc::c_char,
                      arg3: usize, arg4: usize, arg5: *mut mbstate_t)
     -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut wchar_t, arg2: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> *mut wchar_t;
}
extern "C" {
    pub fn wcsdup(arg1: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const wchar_t, arg2: *const wchar_t)
     -> libc::c_int;
}
extern "C" {
    pub fn wcsncasecmp(arg1: *const wchar_t, arg2: *const wchar_t, n: usize)
     -> libc::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const wchar_t, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(arg1: *mut libc::c_char, arg2: *mut *const wchar_t,
                      arg3: usize, arg4: usize, arg5: *mut mbstate_t)
     -> usize;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslcat(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut wchar_t, arg2: *const wchar_t, arg3: usize)
     -> usize;
}
pub type rsize_t = libc::c_ulong;
pub type max_align_t = f64;
pub type sig_atomic_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_i386_thread_state {
    pub __eax: libc::c_uint,
    pub __ebx: libc::c_uint,
    pub __ecx: libc::c_uint,
    pub __edx: libc::c_uint,
    pub __edi: libc::c_uint,
    pub __esi: libc::c_uint,
    pub __ebp: libc::c_uint,
    pub __esp: libc::c_uint,
    pub __ss: libc::c_uint,
    pub __eflags: libc::c_uint,
    pub __eip: libc::c_uint,
    pub __cs: libc::c_uint,
    pub __ds: libc::c_uint,
    pub __es: libc::c_uint,
    pub __fs: libc::c_uint,
    pub __gs: libc::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_thread_state>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_thread_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_thread_state>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_thread_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eax as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eax )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ebx as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ebx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ecx as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ecx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __edx as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __edx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __edi as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __edi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __esi as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __esi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ebp as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ebp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __esp as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __esp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ss as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eflags
                as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eflags )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eip as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __cs as
                * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ds as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ds ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __es as
                * const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __fs as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __fs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __gs as
                * const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __gs ) ));
}
impl Clone for __darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_fp_control {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_control>() , 2usize , concat
               ! ( "Size of: " , stringify ! ( __darwin_fp_control ) ));
    assert_eq! (::std::mem::align_of::<__darwin_fp_control>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_fp_control ) ));
}
impl Clone for __darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> libc::c_ushort {
        let mask = 1usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: libc::c_ushort) {
        let mask = 1usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __denorm(&self) -> libc::c_ushort {
        let mask = 2usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: libc::c_ushort) {
        let mask = 2usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __zdiv(&self) -> libc::c_ushort {
        let mask = 4usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: libc::c_ushort) {
        let mask = 4usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __ovrfl(&self) -> libc::c_ushort {
        let mask = 8usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: libc::c_ushort) {
        let mask = 8usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __undfl(&self) -> libc::c_ushort {
        let mask = 16usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: libc::c_ushort) {
        let mask = 16usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __precis(&self) -> libc::c_ushort {
        let mask = 32usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 5usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: libc::c_ushort) {
        let mask = 32usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 5usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __pc(&self) -> libc::c_ushort {
        let mask = 768usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: libc::c_ushort) {
        let mask = 768usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __rc(&self) -> libc::c_ushort {
        let mask = 3072usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: libc::c_ushort) {
        let mask = 3072usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__invalid: libc::c_ushort, __denorm: libc::c_ushort,
                          __zdiv: libc::c_ushort, __ovrfl: libc::c_ushort,
                          __undfl: libc::c_ushort, __precis: libc::c_ushort,
                          __pc: libc::c_ushort, __rc: libc::c_ushort) -> u16 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({ 0 } |
                                                ((__invalid as u16 as u16) <<
                                                     0usize) &
                                                    (1usize as u16))
                                       } |
                                           ((__denorm as u16 as u16) <<
                                                1usize) & (2usize as u16))
                                  } |
                                      ((__zdiv as u16 as u16) << 2usize) &
                                          (4usize as u16))
                             } |
                                 ((__ovrfl as u16 as u16) << 3usize) &
                                     (8usize as u16))
                        } |
                            ((__undfl as u16 as u16) << 4usize) &
                                (16usize as u16))
                   } |
                       ((__precis as u16 as u16) << 5usize) &
                           (32usize as u16))
              } | ((__pc as u16 as u16) << 8usize) & (768usize as u16))
         } | ((__rc as u16 as u16) << 10usize) & (3072usize as u16))
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_fp_status {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_status>() , 2usize , concat !
               ( "Size of: " , stringify ! ( __darwin_fp_status ) ));
    assert_eq! (::std::mem::align_of::<__darwin_fp_status>() , 2usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_fp_status ) ));
}
impl Clone for __darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> libc::c_ushort {
        let mask = 1usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: libc::c_ushort) {
        let mask = 1usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __denorm(&self) -> libc::c_ushort {
        let mask = 2usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 1usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: libc::c_ushort) {
        let mask = 2usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 1usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __zdiv(&self) -> libc::c_ushort {
        let mask = 4usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 2usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: libc::c_ushort) {
        let mask = 4usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 2usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __ovrfl(&self) -> libc::c_ushort {
        let mask = 8usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 3usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: libc::c_ushort) {
        let mask = 8usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 3usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __undfl(&self) -> libc::c_ushort {
        let mask = 16usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 4usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: libc::c_ushort) {
        let mask = 16usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 4usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __precis(&self) -> libc::c_ushort {
        let mask = 32usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 5usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: libc::c_ushort) {
        let mask = 32usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 5usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __stkflt(&self) -> libc::c_ushort {
        let mask = 64usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 6usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: libc::c_ushort) {
        let mask = 64usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 6usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __errsumm(&self) -> libc::c_ushort {
        let mask = 128usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: libc::c_ushort) {
        let mask = 128usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 7usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __c0(&self) -> libc::c_ushort {
        let mask = 256usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: libc::c_ushort) {
        let mask = 256usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __c1(&self) -> libc::c_ushort {
        let mask = 512usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 9usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: libc::c_ushort) {
        let mask = 512usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 9usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __c2(&self) -> libc::c_ushort {
        let mask = 1024usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 10usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: libc::c_ushort) {
        let mask = 1024usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 10usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __tos(&self) -> libc::c_ushort {
        let mask = 14336usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 11usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: libc::c_ushort) {
        let mask = 14336usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 11usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __c3(&self) -> libc::c_ushort {
        let mask = 16384usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 14usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: libc::c_ushort) {
        let mask = 16384usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 14usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __busy(&self) -> libc::c_ushort {
        let mask = 32768usize as u16;
        let unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 15usize;
        unsafe { ::std::mem::transmute(val as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: libc::c_ushort) {
        let mask = 32768usize as u16;
        let val = val as u16 as u16;
        let mut unit_field_val: u16 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 15usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__invalid: libc::c_ushort, __denorm: libc::c_ushort,
                          __zdiv: libc::c_ushort, __ovrfl: libc::c_ushort,
                          __undfl: libc::c_ushort, __precis: libc::c_ushort,
                          __stkflt: libc::c_ushort, __errsumm: libc::c_ushort,
                          __c0: libc::c_ushort, __c1: libc::c_ushort,
                          __c2: libc::c_ushort, __tos: libc::c_ushort,
                          __c3: libc::c_ushort, __busy: libc::c_ushort)
     -> u16 {
        ({
             ({
                  ({
                       ({
                            ({
                                 ({
                                      ({
                                           ({
                                                ({
                                                     ({
                                                          ({
                                                               ({
                                                                    ({
                                                                         ({
                                                                              0
                                                                          } |
                                                                              ((__invalid
                                                                                    as
                                                                                    u16
                                                                                    as
                                                                                    u16)
                                                                                   <<
                                                                                   0usize)
                                                                                  &
                                                                                  (1usize
                                                                                       as
                                                                                       u16))
                                                                     } |
                                                                         ((__denorm
                                                                               as
                                                                               u16
                                                                               as
                                                                               u16)
                                                                              <<
                                                                              1usize)
                                                                             &
                                                                             (2usize
                                                                                  as
                                                                                  u16))
                                                                } |
                                                                    ((__zdiv
                                                                          as
                                                                          u16
                                                                          as
                                                                          u16)
                                                                         <<
                                                                         2usize)
                                                                        &
                                                                        (4usize
                                                                             as
                                                                             u16))
                                                           } |
                                                               ((__ovrfl as
                                                                     u16 as
                                                                     u16) <<
                                                                    3usize) &
                                                                   (8usize as
                                                                        u16))
                                                      } |
                                                          ((__undfl as u16 as
                                                                u16) <<
                                                               4usize) &
                                                              (16usize as
                                                                   u16))
                                                 } |
                                                     ((__precis as u16 as u16)
                                                          << 5usize) &
                                                         (32usize as u16))
                                            } |
                                                ((__stkflt as u16 as u16) <<
                                                     6usize) &
                                                    (64usize as u16))
                                       } |
                                           ((__errsumm as u16 as u16) <<
                                                7usize) & (128usize as u16))
                                  } |
                                      ((__c0 as u16 as u16) << 8usize) &
                                          (256usize as u16))
                             } |
                                 ((__c1 as u16 as u16) << 9usize) &
                                     (512usize as u16))
                        } |
                            ((__c2 as u16 as u16) << 10usize) &
                                (1024usize as u16))
                   } |
                       ((__tos as u16 as u16) << 11usize) &
                           (14336usize as u16))
              } | ((__c3 as u16 as u16) << 14usize) & (16384usize as u16))
         } | ((__busy as u16 as u16) << 15usize) & (32768usize as u16))
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [libc::c_char; 10usize],
    pub __mmst_rsrv: [libc::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_mmst_reg>() , 16usize , concat !
               ( "Size of: " , stringify ! ( __darwin_mmst_reg ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mmst_reg>() , 1usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_mmst_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mmst_reg ) ) . __mmst_reg as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mmst_reg ) ,
                "::" , stringify ! ( __mmst_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mmst_reg ) ) . __mmst_rsrv as *
                const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mmst_reg ) ,
                "::" , stringify ! ( __mmst_rsrv ) ));
}
impl Clone for __darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [libc::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_xmm_reg>() , 16usize , concat !
               ( "Size of: " , stringify ! ( __darwin_xmm_reg ) ));
    assert_eq! (::std::mem::align_of::<__darwin_xmm_reg>() , 1usize , concat !
                ( "Alignment of " , stringify ! ( __darwin_xmm_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_xmm_reg ) ) . __xmm_reg as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_xmm_reg ) ,
                "::" , stringify ! ( __xmm_reg ) ));
}
impl Clone for __darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [libc::c_char; 224usize],
    pub __fpu_reserved1: libc::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_float_state>() , 524usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_float_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_float_state>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_float_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fcw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fsw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ftw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fop )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_mxcsr
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm0 as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm1 as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm2 as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm3 as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm4 as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm5 as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm6 as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm7 as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
}
impl Default for __darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [libc::c_char; 224usize],
    pub __fpu_reserved1: libc::c_int,
    pub __avx_reserved1: [libc::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_avx_state>() , 716usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_avx_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_avx_state>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_avx_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fcw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fsw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv1
                as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ip as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_cs as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv2
                as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_dp as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_dp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ds as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ds ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv3
                as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_mxcsr
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm0
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm1
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm2
                as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm3
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm4
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm5
                as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm6
                as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm7
                as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm0
                as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm1
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm2
                as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm3
                as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm4
                as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm5
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm6
                as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm7
                as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv4
                as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __avx_reserved1 as * const _ as usize } , 524usize , concat !
                (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __avx_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh0
                as * const _ as usize } , 588usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh1
                as * const _ as usize } , 604usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh2
                as * const _ as usize } , 620usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh3
                as * const _ as usize } , 636usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh4
                as * const _ as usize } , 652usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh5
                as * const _ as usize } , 668usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh6
                as * const _ as usize } , 684usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh7
                as * const _ as usize } , 700usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh7 ) ));
}
impl Default for __darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_exception_state>() ,
               12usize , concat ! (
               "Size of: " , stringify ! ( __darwin_i386_exception_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_exception_state>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_exception_state
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) .
                __trapno as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! (
                __trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) . __cpu
                as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! ( __cpu )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) . __err
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! ( __err )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) .
                __faultvaddr as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! (
                __faultvaddr ) ));
}
impl Clone for __darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: libc::c_uint,
    pub __dr1: libc::c_uint,
    pub __dr2: libc::c_uint,
    pub __dr3: libc::c_uint,
    pub __dr4: libc::c_uint,
    pub __dr5: libc::c_uint,
    pub __dr6: libc::c_uint,
    pub __dr7: libc::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state32>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_debug_state32 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_debug_state32>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_debug_state32 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr0 as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr1 as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr2 as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr3 as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr4 as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr5 as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr6 as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr7 as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr7 )
                ));
}
impl Clone for __darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_thread_state64>() , 168usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_thread_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_thread_state64>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_thread_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rax
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rax )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rbx
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rcx
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rcx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rdx
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rdi
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rsi
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rbp
                as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rsp
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r8 as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r8 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r9 as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r9 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r10
                as * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r10 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r11
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r11 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r12
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r12 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r13
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r13 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r14
                as * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r14 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r15
                as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r15 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rip
                as * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) .
                __rflags as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rflags
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __cs as
                * const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __fs as
                * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __fs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __gs as
                * const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __gs )
                ));
}
impl Clone for __darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [libc::c_char; 96usize],
    pub __fpu_reserved1: libc::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_float_state64>() , 524usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_float_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_float_state64>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_float_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fcw as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fcw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fsw as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fsw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_ftw as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ftw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fop as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fop
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm0 as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm1 as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm2 as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm3 as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm4 as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm5 as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm6 as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm7 as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm8 as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm8
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm9 as * const _ as usize } , 312usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm9
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm10 as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm11 as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm12 as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm13 as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm14 as * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm15 as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
}
impl Default for __darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [libc::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [libc::c_char; 96usize],
    pub __fpu_reserved1: libc::c_int,
    pub __avx_reserved1: [libc::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_avx_state64>() , 844usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_avx_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_avx_state64>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_avx_state64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fcw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fsw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ftw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fop )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_mxcsr
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm0
                as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm1
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm2
                as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm3
                as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm4
                as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm5
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm6
                as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm7
                as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm7 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm8
                as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm8 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm9
                as * const _ as usize } , 312usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm9 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm10 as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm10
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm11 as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm11
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm12 as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm12
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm13 as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm13
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm14 as * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm14
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm15 as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm15
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __avx_reserved1 as * const _ as usize } , 524usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __avx_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh8
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh9
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh10
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh11
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh12
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh13
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh14
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh15
                ) ));
}
impl Default for __darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_exception_state64>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_exception_state64 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_exception_state64>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_exception_state64
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __trapno as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! (
                __trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __cpu as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! ( __cpu
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __err as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! ( __err
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __faultvaddr as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! (
                __faultvaddr ) ));
}
impl Clone for __darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state64>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_debug_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_debug_state64>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_debug_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr0 as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr1 as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr2 as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr3 as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr4 as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr5 as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr6 as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr7 as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr7 )
                ));
}
impl Clone for __darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext32>() , 600usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_mcontext32 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext32>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __es as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __ss as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __fs as * const
                _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __fs ) ));
}
impl Default for __darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx32>() , 792usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_mcontext_avx32 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext_avx32>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext_avx32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __es as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __ss as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __fs as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __fs ) ));
}
impl Default for __darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext64>() , 712usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_mcontext64 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext64>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __es as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __ss as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __fs as * const
                _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __fs ) ));
}
impl Default for __darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx64>() , 1032usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_mcontext_avx64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext_avx64>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext_avx64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __es as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __ss as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __fs as *
                const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __fs ) ));
}
impl Default for __darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: libc::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(::std::mem::size_of::<__darwin_sigaltstack>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_sigaltstack )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_sigaltstack>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_sigaltstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_sp as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_size as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_flags ) ));
}
impl Clone for __darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl Default for __darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_ucontext {
    pub uc_onstack: libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(::std::mem::size_of::<__darwin_ucontext>() , 56usize , concat !
               ( "Size of: " , stringify ! ( __darwin_ucontext ) ));
    assert_eq! (::std::mem::align_of::<__darwin_ucontext>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_ucontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_onstack as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_onstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_sigmask as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_sigmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_stack as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_link as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_mcsize as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_mcsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_mcontext as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_mcontext ) ));
}
impl Clone for __darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl Default for __darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = __darwin_ucontext;
pub type pid_t = __darwin_pid_t;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct sigval {
    pub sival_int: __BindgenUnionField<libc::c_int>,
    pub sival_ptr: __BindgenUnionField<*mut libc::c_void>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( sigval ) ));
    assert_eq! (::std::mem::align_of::<sigval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_int ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_ptr ) ));
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub sigev_notify: libc::c_int,
    pub sigev_signo: libc::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 32usize , concat ! (
               "Size of: " , stringify ! ( sigevent ) ));
    assert_eq! (::std::mem::align_of::<sigevent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigevent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify_function as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify_function ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify_attributes as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify_attributes ) ));
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
impl Default for sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __siginfo {
    pub si_signo: libc::c_int,
    pub si_errno: libc::c_int,
    pub si_code: libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: libc::c_int,
    pub si_addr: *mut libc::c_void,
    pub si_value: sigval,
    pub si_band: libc::c_long,
    pub __pad: [libc::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(::std::mem::size_of::<__siginfo>() , 104usize , concat ! (
               "Size of: " , stringify ! ( __siginfo ) ));
    assert_eq! (::std::mem::align_of::<__siginfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __siginfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_signo as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_errno as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_errno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_code as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_pid as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_uid as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_status as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_addr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_value as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_band as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_band ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . __pad as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( __pad ) ));
}
impl Clone for __siginfo {
    fn clone(&self) -> Self { *self }
}
impl Default for __siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct __sigaction_u {
    pub __sa_handler: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         libc::c_int)>>,
    pub __sa_sigaction: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           libc::c_int,
                                                                                       arg2:
                                                                                           *mut __siginfo,
                                                                                       arg3:
                                                                                           *mut libc::c_void)>>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(::std::mem::size_of::<__sigaction_u>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __sigaction_u ) ));
    assert_eq! (::std::mem::align_of::<__sigaction_u>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction_u ) ) . __sa_handler as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction_u ) , "::"
                , stringify ! ( __sa_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction_u ) ) . __sa_sigaction as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction_u ) , "::"
                , stringify ! ( __sa_sigaction ) ));
}
impl Clone for __sigaction_u {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut libc::c_void,
                                                             arg2:
                                                                 libc::c_int,
                                                             arg3:
                                                                 libc::c_int,
                                                             arg4:
                                                                 *mut siginfo_t,
                                                             arg5:
                                                                 *mut libc::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: libc::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(::std::mem::size_of::<__sigaction>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __sigaction ) ));
    assert_eq! (::std::mem::align_of::<__sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . __sigaction_u as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_tramp as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_tramp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_mask as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_flags as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
}
impl Clone for __sigaction {
    fn clone(&self) -> Self { *self }
}
impl Default for __sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: libc::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigaction ) ));
    assert_eq! (::std::mem::align_of::<sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . __sigaction_u as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
pub type sig_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   libc::c_int)>,
    pub sv_mask: libc::c_int,
    pub sv_flags: libc::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(::std::mem::size_of::<sigvec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigvec ) ));
    assert_eq! (::std::mem::align_of::<sigvec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigvec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_handler as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_flags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_flags ) ));
}
impl Clone for sigvec {
    fn clone(&self) -> Self { *self }
}
impl Default for sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut libc::c_char,
    pub ss_onstack: libc::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigstack ) ));
    assert_eq! (::std::mem::align_of::<sigstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_onstack ) ));
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
impl Default for sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn signal(arg1: libc::c_int,
                  arg2:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     libc::c_int)>)
     ->
         ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int,
                                                    arg2:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       libc::c_int)>)>;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static mut sys_signame: [*const libc::c_char; 32usize];
}
extern "C" {
    pub static mut sys_siglist: [*const libc::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn bsd_signal(arg1: libc::c_int,
                      arg2:
                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         libc::c_int)>)
     ->
         ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int,
                                                    arg2:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       libc::c_int)>)>;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_sigmask(arg1: libc::c_int, arg2: *const sigset_t,
                           arg3: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigaction(arg1: libc::c_int, arg2: *const sigaction,
                     arg3: *mut sigaction) -> libc::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t)
     -> libc::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sighold(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigignore(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn siginterrupt(arg1: libc::c_int, arg2: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn sigpause(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigprocmask(arg1: libc::c_int, arg2: *const sigset_t,
                       arg3: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigset(arg1: libc::c_int,
                  arg2:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     libc::c_int)>)
     ->
         ::std::option::Option<unsafe extern "C" fn(arg1: libc::c_int,
                                                    arg2:
                                                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                                       libc::c_int)>)>;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigwait(arg1: *const sigset_t, arg2: *mut libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn psignal(arg1: libc::c_uint, arg2: *const libc::c_char);
}
extern "C" {
    pub fn sigblock(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigvec(arg1: libc::c_int, arg2: *mut sigvec, arg3: *mut sigvec)
     -> libc::c_int;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = libc::c_long;
pub type uintmax_t = libc::c_ulong;
extern "C" {
    pub fn TCOD_strdup(s: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn TCOD_strcasecmp(s1: *const libc::c_char, s2: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_strncasecmp(s1: *const libc::c_char, s2: *const libc::c_char,
                            n: usize) -> libc::c_int;
}
pub type TCOD_line_listener_t =
    ::std::option::Option<unsafe extern "C" fn(x: libc::c_int, y: libc::c_int)
                              -> bool>;
extern "C" {
    pub fn TCOD_line_init(xFrom: libc::c_int, yFrom: libc::c_int,
                          xTo: libc::c_int, yTo: libc::c_int);
}
extern "C" {
    pub fn TCOD_line_step(xCur: *mut libc::c_int, yCur: *mut libc::c_int)
     -> bool;
}
extern "C" {
    pub fn TCOD_line(xFrom: libc::c_int, yFrom: libc::c_int, xTo: libc::c_int,
                     yTo: libc::c_int, listener: TCOD_line_listener_t)
     -> bool;
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_bresenham_data_t {
    pub stepx: libc::c_int,
    pub stepy: libc::c_int,
    pub e: libc::c_int,
    pub deltax: libc::c_int,
    pub deltay: libc::c_int,
    pub origx: libc::c_int,
    pub origy: libc::c_int,
    pub destx: libc::c_int,
    pub desty: libc::c_int,
}
#[test]
fn bindgen_test_layout_TCOD_bresenham_data_t() {
    assert_eq!(::std::mem::size_of::<TCOD_bresenham_data_t>() , 36usize ,
               concat ! ( "Size of: " , stringify ! ( TCOD_bresenham_data_t )
               ));
    assert_eq! (::std::mem::align_of::<TCOD_bresenham_data_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( TCOD_bresenham_data_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . stepx as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( stepx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . stepy as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( stepy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . e as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( e ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . deltax as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( deltax ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . deltay as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( deltay ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . origx as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( origx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . origy as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( origy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . destx as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( destx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bresenham_data_t ) ) . desty as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bresenham_data_t )
                , "::" , stringify ! ( desty ) ));
}
impl Clone for TCOD_bresenham_data_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_line_init_mt(xFrom: libc::c_int, yFrom: libc::c_int,
                             xTo: libc::c_int, yTo: libc::c_int,
                             data: *mut TCOD_bresenham_data_t);
}
extern "C" {
    pub fn TCOD_line_step_mt(xCur: *mut libc::c_int, yCur: *mut libc::c_int,
                             data: *mut TCOD_bresenham_data_t) -> bool;
}
extern "C" {
    pub fn TCOD_line_mt(xFrom: libc::c_int, yFrom: libc::c_int,
                        xTo: libc::c_int, yTo: libc::c_int,
                        listener: TCOD_line_listener_t,
                        data: *mut TCOD_bresenham_data_t) -> bool;
}
pub type TCOD_random_t = *mut libc::c_void;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_dice_t {
    pub nb_rolls: libc::c_int,
    pub nb_faces: libc::c_int,
    pub multiplier: f32,
    pub addsub: f32,
}
#[test]
fn bindgen_test_layout_TCOD_dice_t() {
    assert_eq!(::std::mem::size_of::<TCOD_dice_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TCOD_dice_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_dice_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_dice_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_dice_t ) ) . nb_rolls as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_dice_t ) , "::" ,
                stringify ! ( nb_rolls ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_dice_t ) ) . nb_faces as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_dice_t ) , "::" ,
                stringify ! ( nb_faces ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_dice_t ) ) . multiplier as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_dice_t ) , "::" ,
                stringify ! ( multiplier ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_dice_t ) ) . addsub as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_dice_t ) , "::" ,
                stringify ! ( addsub ) ));
}
impl Clone for TCOD_dice_t {
    fn clone(&self) -> Self { *self }
}
pub const TCOD_RNG_MT: TCOD_random_algo_t = 0;
pub const TCOD_RNG_CMWC: TCOD_random_algo_t = 1;
pub type TCOD_random_algo_t = libc::c_uint;
pub const TCOD_DISTRIBUTION_LINEAR: TCOD_distribution_t = 0;
pub const TCOD_DISTRIBUTION_GAUSSIAN: TCOD_distribution_t = 1;
pub const TCOD_DISTRIBUTION_GAUSSIAN_RANGE: TCOD_distribution_t = 2;
pub const TCOD_DISTRIBUTION_GAUSSIAN_INVERSE: TCOD_distribution_t = 3;
pub const TCOD_DISTRIBUTION_GAUSSIAN_RANGE_INVERSE: TCOD_distribution_t = 4;
pub type TCOD_distribution_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _TCOD_tree_t {
    pub next: *mut _TCOD_tree_t,
    pub father: *mut _TCOD_tree_t,
    pub sons: *mut _TCOD_tree_t,
}
#[test]
fn bindgen_test_layout__TCOD_tree_t() {
    assert_eq!(::std::mem::size_of::<_TCOD_tree_t>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _TCOD_tree_t ) ));
    assert_eq! (::std::mem::align_of::<_TCOD_tree_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _TCOD_tree_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _TCOD_tree_t ) ) . next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _TCOD_tree_t ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _TCOD_tree_t ) ) . father as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _TCOD_tree_t ) , "::" ,
                stringify ! ( father ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _TCOD_tree_t ) ) . sons as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _TCOD_tree_t ) , "::" ,
                stringify ! ( sons ) ));
}
impl Clone for _TCOD_tree_t {
    fn clone(&self) -> Self { *self }
}
impl Default for _TCOD_tree_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCOD_tree_t = _TCOD_tree_t;
extern "C" {
    pub fn TCOD_tree_new() -> *mut TCOD_tree_t;
}
extern "C" {
    pub fn TCOD_tree_add_son(node: *mut TCOD_tree_t, son: *mut TCOD_tree_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_bsp_t {
    pub tree: TCOD_tree_t,
    pub x: libc::c_int,
    pub y: libc::c_int,
    pub w: libc::c_int,
    pub h: libc::c_int,
    pub position: libc::c_int,
    pub level: u8,
    pub horizontal: bool,
}
#[test]
fn bindgen_test_layout_TCOD_bsp_t() {
    assert_eq!(::std::mem::size_of::<TCOD_bsp_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( TCOD_bsp_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_bsp_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_bsp_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . tree as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( tree ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . x as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . y as * const _ as usize
                } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . w as * const _ as usize
                } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . h as * const _ as usize
                } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( h ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . position as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( position ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . level as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( level ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_bsp_t ) ) . horizontal as * const _
                as usize } , 45usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_bsp_t ) , "::" ,
                stringify ! ( horizontal ) ));
}
impl Clone for TCOD_bsp_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_bsp_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCOD_bsp_callback_t =
    ::std::option::Option<unsafe extern "C" fn(node: *mut TCOD_bsp_t,
                                               userData: *mut libc::c_void)
                              -> bool>;
extern "C" {
    pub fn TCOD_bsp_new() -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_new_with_size(x: libc::c_int, y: libc::c_int,
                                  w: libc::c_int, h: libc::c_int)
     -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_delete(node: *mut TCOD_bsp_t);
}
extern "C" {
    pub fn TCOD_bsp_left(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_right(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_father(node: *const TCOD_bsp_t) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_is_leaf(node: *const TCOD_bsp_t) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_pre_order(node: *mut TCOD_bsp_t,
                                       listener: TCOD_bsp_callback_t,
                                       userData: *mut libc::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_in_order(node: *mut TCOD_bsp_t,
                                      listener: TCOD_bsp_callback_t,
                                      userData: *mut libc::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_post_order(node: *mut TCOD_bsp_t,
                                        listener: TCOD_bsp_callback_t,
                                        userData: *mut libc::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_level_order(node: *mut TCOD_bsp_t,
                                         listener: TCOD_bsp_callback_t,
                                         userData: *mut libc::c_void) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_traverse_inverted_level_order(node: *mut TCOD_bsp_t,
                                                  listener:
                                                      TCOD_bsp_callback_t,
                                                  userData: *mut libc::c_void)
     -> bool;
}
extern "C" {
    pub fn TCOD_bsp_contains(node: *const TCOD_bsp_t, x: libc::c_int,
                             y: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_bsp_find_node(node: *const TCOD_bsp_t, x: libc::c_int,
                              y: libc::c_int) -> *mut TCOD_bsp_t;
}
extern "C" {
    pub fn TCOD_bsp_resize(node: *mut TCOD_bsp_t, x: libc::c_int,
                           y: libc::c_int, w: libc::c_int, h: libc::c_int);
}
extern "C" {
    pub fn TCOD_bsp_split_once(node: *mut TCOD_bsp_t, horizontal: bool,
                               position: libc::c_int);
}
extern "C" {
    pub fn TCOD_bsp_split_recursive(node: *mut TCOD_bsp_t,
                                    randomizer: TCOD_random_t,
                                    nb: libc::c_int, minHSize: libc::c_int,
                                    minVSize: libc::c_int, maxHRatio: f32,
                                    maxVRatio: f32);
}
extern "C" {
    pub fn TCOD_bsp_remove_sons(node: *mut TCOD_bsp_t);
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_color_t {
    pub r: u8,
    pub g: u8,
    pub b: u8,
}
#[test]
fn bindgen_test_layout_TCOD_color_t() {
    assert_eq!(::std::mem::size_of::<TCOD_color_t>() , 3usize , concat ! (
               "Size of: " , stringify ! ( TCOD_color_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_color_t>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_color_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_color_t ) ) . r as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_color_t ) , "::" ,
                stringify ! ( r ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_color_t ) ) . g as * const _ as
                usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_color_t ) , "::" ,
                stringify ! ( g ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_color_t ) ) . b as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_color_t ) , "::" ,
                stringify ! ( b ) ));
}
impl Clone for TCOD_color_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_color_RGB(r: u8, g: u8, b: u8) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_HSV(h: f32, s: f32, v: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_equals(c1: TCOD_color_t, c2: TCOD_color_t) -> bool;
}
extern "C" {
    pub fn TCOD_color_add(c1: TCOD_color_t, c2: TCOD_color_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_subtract(c1: TCOD_color_t, c2: TCOD_color_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply(c1: TCOD_color_t, c2: TCOD_color_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_multiply_scalar(c1: TCOD_color_t, value: f32)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_lerp(c1: TCOD_color_t, c2: TCOD_color_t, coef: f32)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_color_set_HSV(c: *mut TCOD_color_t, h: f32, s: f32, v: f32);
}
extern "C" {
    pub fn TCOD_color_get_HSV(c: TCOD_color_t, h: *mut f32, s: *mut f32,
                              v: *mut f32);
}
extern "C" {
    pub fn TCOD_color_get_hue(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_hue(c: *mut TCOD_color_t, h: f32);
}
extern "C" {
    pub fn TCOD_color_get_saturation(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_saturation(c: *mut TCOD_color_t, s: f32);
}
extern "C" {
    pub fn TCOD_color_get_value(c: TCOD_color_t) -> f32;
}
extern "C" {
    pub fn TCOD_color_set_value(c: *mut TCOD_color_t, v: f32);
}
extern "C" {
    pub fn TCOD_color_shift_hue(c: *mut TCOD_color_t, hshift: f32);
}
extern "C" {
    pub fn TCOD_color_scale_HSV(c: *mut TCOD_color_t, scoef: f32, vcoef: f32);
}
extern "C" {
    pub fn TCOD_color_gen_map(map: *mut TCOD_color_t, nb_key: libc::c_int,
                              key_color: *const TCOD_color_t,
                              key_index: *const libc::c_int);
}
pub const TCOD_COLOR_RED: _bindgen_ty_1 = 0;
pub const TCOD_COLOR_FLAME: _bindgen_ty_1 = 1;
pub const TCOD_COLOR_ORANGE: _bindgen_ty_1 = 2;
pub const TCOD_COLOR_AMBER: _bindgen_ty_1 = 3;
pub const TCOD_COLOR_YELLOW: _bindgen_ty_1 = 4;
pub const TCOD_COLOR_LIME: _bindgen_ty_1 = 5;
pub const TCOD_COLOR_CHARTREUSE: _bindgen_ty_1 = 6;
pub const TCOD_COLOR_GREEN: _bindgen_ty_1 = 7;
pub const TCOD_COLOR_SEA: _bindgen_ty_1 = 8;
pub const TCOD_COLOR_TURQUOISE: _bindgen_ty_1 = 9;
pub const TCOD_COLOR_CYAN: _bindgen_ty_1 = 10;
pub const TCOD_COLOR_SKY: _bindgen_ty_1 = 11;
pub const TCOD_COLOR_AZURE: _bindgen_ty_1 = 12;
pub const TCOD_COLOR_BLUE: _bindgen_ty_1 = 13;
pub const TCOD_COLOR_HAN: _bindgen_ty_1 = 14;
pub const TCOD_COLOR_VIOLET: _bindgen_ty_1 = 15;
pub const TCOD_COLOR_PURPLE: _bindgen_ty_1 = 16;
pub const TCOD_COLOR_FUCHSIA: _bindgen_ty_1 = 17;
pub const TCOD_COLOR_MAGENTA: _bindgen_ty_1 = 18;
pub const TCOD_COLOR_PINK: _bindgen_ty_1 = 19;
pub const TCOD_COLOR_CRIMSON: _bindgen_ty_1 = 20;
pub const TCOD_COLOR_NB: _bindgen_ty_1 = 21;
pub type _bindgen_ty_1 = libc::c_uint;
pub const TCOD_COLOR_DESATURATED: _bindgen_ty_2 = 0;
pub const TCOD_COLOR_LIGHTEST: _bindgen_ty_2 = 1;
pub const TCOD_COLOR_LIGHTER: _bindgen_ty_2 = 2;
pub const TCOD_COLOR_LIGHT: _bindgen_ty_2 = 3;
pub const TCOD_COLOR_NORMAL: _bindgen_ty_2 = 4;
pub const TCOD_COLOR_DARK: _bindgen_ty_2 = 5;
pub const TCOD_COLOR_DARKER: _bindgen_ty_2 = 6;
pub const TCOD_COLOR_DARKEST: _bindgen_ty_2 = 7;
pub const TCOD_COLOR_LEVELS: _bindgen_ty_2 = 8;
pub type _bindgen_ty_2 = libc::c_uint;
extern "C" {
    pub static mut TCOD_colors: [[TCOD_color_t; 8usize]; 21usize];
}
extern "C" {
    pub static TCOD_black: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_grey: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_gray: TCOD_color_t;
}
extern "C" {
    pub static TCOD_white: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sepia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_dark_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darker_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_darkest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_light_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lighter_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_lightest_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_red: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_flame: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_orange: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_amber: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_yellow: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_lime: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_chartreuse: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_green: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sea: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_turquoise: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_cyan: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_sky: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_azure: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_blue: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_han: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_violet: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_purple: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_fuchsia: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_magenta: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_pink: TCOD_color_t;
}
extern "C" {
    pub static TCOD_desaturated_crimson: TCOD_color_t;
}
extern "C" {
    pub static TCOD_brass: TCOD_color_t;
}
extern "C" {
    pub static TCOD_copper: TCOD_color_t;
}
extern "C" {
    pub static TCOD_gold: TCOD_color_t;
}
extern "C" {
    pub static TCOD_silver: TCOD_color_t;
}
extern "C" {
    pub static TCOD_celadon: TCOD_color_t;
}
extern "C" {
    pub static TCOD_peach: TCOD_color_t;
}
pub type TCOD_console_t = *mut libc::c_void;
pub const TCODK_NONE: TCOD_keycode_t = 0;
pub const TCODK_ESCAPE: TCOD_keycode_t = 1;
pub const TCODK_BACKSPACE: TCOD_keycode_t = 2;
pub const TCODK_TAB: TCOD_keycode_t = 3;
pub const TCODK_ENTER: TCOD_keycode_t = 4;
pub const TCODK_SHIFT: TCOD_keycode_t = 5;
pub const TCODK_CONTROL: TCOD_keycode_t = 6;
pub const TCODK_ALT: TCOD_keycode_t = 7;
pub const TCODK_PAUSE: TCOD_keycode_t = 8;
pub const TCODK_CAPSLOCK: TCOD_keycode_t = 9;
pub const TCODK_PAGEUP: TCOD_keycode_t = 10;
pub const TCODK_PAGEDOWN: TCOD_keycode_t = 11;
pub const TCODK_END: TCOD_keycode_t = 12;
pub const TCODK_HOME: TCOD_keycode_t = 13;
pub const TCODK_UP: TCOD_keycode_t = 14;
pub const TCODK_LEFT: TCOD_keycode_t = 15;
pub const TCODK_RIGHT: TCOD_keycode_t = 16;
pub const TCODK_DOWN: TCOD_keycode_t = 17;
pub const TCODK_PRINTSCREEN: TCOD_keycode_t = 18;
pub const TCODK_INSERT: TCOD_keycode_t = 19;
pub const TCODK_DELETE: TCOD_keycode_t = 20;
pub const TCODK_LWIN: TCOD_keycode_t = 21;
pub const TCODK_RWIN: TCOD_keycode_t = 22;
pub const TCODK_APPS: TCOD_keycode_t = 23;
pub const TCODK_0: TCOD_keycode_t = 24;
pub const TCODK_1: TCOD_keycode_t = 25;
pub const TCODK_2: TCOD_keycode_t = 26;
pub const TCODK_3: TCOD_keycode_t = 27;
pub const TCODK_4: TCOD_keycode_t = 28;
pub const TCODK_5: TCOD_keycode_t = 29;
pub const TCODK_6: TCOD_keycode_t = 30;
pub const TCODK_7: TCOD_keycode_t = 31;
pub const TCODK_8: TCOD_keycode_t = 32;
pub const TCODK_9: TCOD_keycode_t = 33;
pub const TCODK_KP0: TCOD_keycode_t = 34;
pub const TCODK_KP1: TCOD_keycode_t = 35;
pub const TCODK_KP2: TCOD_keycode_t = 36;
pub const TCODK_KP3: TCOD_keycode_t = 37;
pub const TCODK_KP4: TCOD_keycode_t = 38;
pub const TCODK_KP5: TCOD_keycode_t = 39;
pub const TCODK_KP6: TCOD_keycode_t = 40;
pub const TCODK_KP7: TCOD_keycode_t = 41;
pub const TCODK_KP8: TCOD_keycode_t = 42;
pub const TCODK_KP9: TCOD_keycode_t = 43;
pub const TCODK_KPADD: TCOD_keycode_t = 44;
pub const TCODK_KPSUB: TCOD_keycode_t = 45;
pub const TCODK_KPDIV: TCOD_keycode_t = 46;
pub const TCODK_KPMUL: TCOD_keycode_t = 47;
pub const TCODK_KPDEC: TCOD_keycode_t = 48;
pub const TCODK_KPENTER: TCOD_keycode_t = 49;
pub const TCODK_F1: TCOD_keycode_t = 50;
pub const TCODK_F2: TCOD_keycode_t = 51;
pub const TCODK_F3: TCOD_keycode_t = 52;
pub const TCODK_F4: TCOD_keycode_t = 53;
pub const TCODK_F5: TCOD_keycode_t = 54;
pub const TCODK_F6: TCOD_keycode_t = 55;
pub const TCODK_F7: TCOD_keycode_t = 56;
pub const TCODK_F8: TCOD_keycode_t = 57;
pub const TCODK_F9: TCOD_keycode_t = 58;
pub const TCODK_F10: TCOD_keycode_t = 59;
pub const TCODK_F11: TCOD_keycode_t = 60;
pub const TCODK_F12: TCOD_keycode_t = 61;
pub const TCODK_NUMLOCK: TCOD_keycode_t = 62;
pub const TCODK_SCROLLLOCK: TCOD_keycode_t = 63;
pub const TCODK_SPACE: TCOD_keycode_t = 64;
pub const TCODK_CHAR: TCOD_keycode_t = 65;
pub const TCODK_TEXT: TCOD_keycode_t = 66;
pub type TCOD_keycode_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_key_t {
    pub vk: TCOD_keycode_t,
    pub c: libc::c_char,
    pub text: [libc::c_char; 32usize],
    pub pressed: bool,
    pub lalt: bool,
    pub lctrl: bool,
    pub lmeta: bool,
    pub ralt: bool,
    pub rctrl: bool,
    pub rmeta: bool,
    pub shift: bool,
}
#[test]
fn bindgen_test_layout_TCOD_key_t() {
    assert_eq!(::std::mem::size_of::<TCOD_key_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( TCOD_key_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_key_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_key_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . vk as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( vk ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . c as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . text as * const _ as
                usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( text ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . pressed as * const _ as
                usize } , 37usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( pressed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . lalt as * const _ as
                usize } , 38usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( lalt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . lctrl as * const _ as
                usize } , 39usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( lctrl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . lmeta as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( lmeta ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . ralt as * const _ as
                usize } , 41usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( ralt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . rctrl as * const _ as
                usize } , 42usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( rctrl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . rmeta as * const _ as
                usize } , 43usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( rmeta ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_key_t ) ) . shift as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_key_t ) , "::" ,
                stringify ! ( shift ) ));
}
impl Clone for TCOD_key_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_key_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const TCOD_CHAR_HLINE: TCOD_chars_t = 196;
pub const TCOD_CHAR_VLINE: TCOD_chars_t = 179;
pub const TCOD_CHAR_NE: TCOD_chars_t = 191;
pub const TCOD_CHAR_NW: TCOD_chars_t = 218;
pub const TCOD_CHAR_SE: TCOD_chars_t = 217;
pub const TCOD_CHAR_SW: TCOD_chars_t = 192;
pub const TCOD_CHAR_TEEW: TCOD_chars_t = 180;
pub const TCOD_CHAR_TEEE: TCOD_chars_t = 195;
pub const TCOD_CHAR_TEEN: TCOD_chars_t = 193;
pub const TCOD_CHAR_TEES: TCOD_chars_t = 194;
pub const TCOD_CHAR_CROSS: TCOD_chars_t = 197;
pub const TCOD_CHAR_DHLINE: TCOD_chars_t = 205;
pub const TCOD_CHAR_DVLINE: TCOD_chars_t = 186;
pub const TCOD_CHAR_DNE: TCOD_chars_t = 187;
pub const TCOD_CHAR_DNW: TCOD_chars_t = 201;
pub const TCOD_CHAR_DSE: TCOD_chars_t = 188;
pub const TCOD_CHAR_DSW: TCOD_chars_t = 200;
pub const TCOD_CHAR_DTEEW: TCOD_chars_t = 185;
pub const TCOD_CHAR_DTEEE: TCOD_chars_t = 204;
pub const TCOD_CHAR_DTEEN: TCOD_chars_t = 202;
pub const TCOD_CHAR_DTEES: TCOD_chars_t = 203;
pub const TCOD_CHAR_DCROSS: TCOD_chars_t = 206;
pub const TCOD_CHAR_BLOCK1: TCOD_chars_t = 176;
pub const TCOD_CHAR_BLOCK2: TCOD_chars_t = 177;
pub const TCOD_CHAR_BLOCK3: TCOD_chars_t = 178;
pub const TCOD_CHAR_ARROW_N: TCOD_chars_t = 24;
pub const TCOD_CHAR_ARROW_S: TCOD_chars_t = 25;
pub const TCOD_CHAR_ARROW_E: TCOD_chars_t = 26;
pub const TCOD_CHAR_ARROW_W: TCOD_chars_t = 27;
pub const TCOD_CHAR_ARROW2_N: TCOD_chars_t = 30;
pub const TCOD_CHAR_ARROW2_S: TCOD_chars_t = 31;
pub const TCOD_CHAR_ARROW2_E: TCOD_chars_t = 16;
pub const TCOD_CHAR_ARROW2_W: TCOD_chars_t = 17;
pub const TCOD_CHAR_DARROW_H: TCOD_chars_t = 29;
pub const TCOD_CHAR_DARROW_V: TCOD_chars_t = 18;
pub const TCOD_CHAR_CHECKBOX_UNSET: TCOD_chars_t = 224;
pub const TCOD_CHAR_CHECKBOX_SET: TCOD_chars_t = 225;
pub const TCOD_CHAR_RADIO_UNSET: TCOD_chars_t = 9;
pub const TCOD_CHAR_RADIO_SET: TCOD_chars_t = 10;
pub const TCOD_CHAR_SUBP_NW: TCOD_chars_t = 226;
pub const TCOD_CHAR_SUBP_NE: TCOD_chars_t = 227;
pub const TCOD_CHAR_SUBP_N: TCOD_chars_t = 228;
pub const TCOD_CHAR_SUBP_SE: TCOD_chars_t = 229;
pub const TCOD_CHAR_SUBP_DIAG: TCOD_chars_t = 230;
pub const TCOD_CHAR_SUBP_E: TCOD_chars_t = 231;
pub const TCOD_CHAR_SUBP_SW: TCOD_chars_t = 232;
pub const TCOD_CHAR_SMILIE: TCOD_chars_t = 1;
pub const TCOD_CHAR_SMILIE_INV: TCOD_chars_t = 2;
pub const TCOD_CHAR_HEART: TCOD_chars_t = 3;
pub const TCOD_CHAR_DIAMOND: TCOD_chars_t = 4;
pub const TCOD_CHAR_CLUB: TCOD_chars_t = 5;
pub const TCOD_CHAR_SPADE: TCOD_chars_t = 6;
pub const TCOD_CHAR_BULLET: TCOD_chars_t = 7;
pub const TCOD_CHAR_BULLET_INV: TCOD_chars_t = 8;
pub const TCOD_CHAR_MALE: TCOD_chars_t = 11;
pub const TCOD_CHAR_FEMALE: TCOD_chars_t = 12;
pub const TCOD_CHAR_NOTE: TCOD_chars_t = 13;
pub const TCOD_CHAR_NOTE_DOUBLE: TCOD_chars_t = 14;
pub const TCOD_CHAR_LIGHT: TCOD_chars_t = 15;
pub const TCOD_CHAR_EXCLAM_DOUBLE: TCOD_chars_t = 19;
pub const TCOD_CHAR_PILCROW: TCOD_chars_t = 20;
pub const TCOD_CHAR_SECTION: TCOD_chars_t = 21;
pub const TCOD_CHAR_POUND: TCOD_chars_t = 156;
pub const TCOD_CHAR_MULTIPLICATION: TCOD_chars_t = 158;
pub const TCOD_CHAR_FUNCTION: TCOD_chars_t = 159;
pub const TCOD_CHAR_RESERVED: TCOD_chars_t = 169;
pub const TCOD_CHAR_HALF: TCOD_chars_t = 171;
pub const TCOD_CHAR_ONE_QUARTER: TCOD_chars_t = 172;
pub const TCOD_CHAR_COPYRIGHT: TCOD_chars_t = 184;
pub const TCOD_CHAR_CENT: TCOD_chars_t = 189;
pub const TCOD_CHAR_YEN: TCOD_chars_t = 190;
pub const TCOD_CHAR_CURRENCY: TCOD_chars_t = 207;
pub const TCOD_CHAR_THREE_QUARTERS: TCOD_chars_t = 243;
pub const TCOD_CHAR_DIVISION: TCOD_chars_t = 246;
pub const TCOD_CHAR_GRADE: TCOD_chars_t = 248;
pub const TCOD_CHAR_UMLAUT: TCOD_chars_t = 249;
pub const TCOD_CHAR_POW1: TCOD_chars_t = 251;
pub const TCOD_CHAR_POW3: TCOD_chars_t = 252;
pub const TCOD_CHAR_POW2: TCOD_chars_t = 253;
pub const TCOD_CHAR_BULLET_SQUARE: TCOD_chars_t = 254;
pub type TCOD_chars_t = libc::c_uint;
pub const TCOD_COLCTRL_1: TCOD_colctrl_t = 1;
pub const TCOD_COLCTRL_2: TCOD_colctrl_t = 2;
pub const TCOD_COLCTRL_3: TCOD_colctrl_t = 3;
pub const TCOD_COLCTRL_4: TCOD_colctrl_t = 4;
pub const TCOD_COLCTRL_5: TCOD_colctrl_t = 5;
pub const TCOD_COLCTRL_NUMBER: TCOD_colctrl_t = 5;
pub const TCOD_COLCTRL_FORE_RGB: TCOD_colctrl_t = 6;
pub const TCOD_COLCTRL_BACK_RGB: TCOD_colctrl_t = 7;
pub const TCOD_COLCTRL_STOP: TCOD_colctrl_t = 8;
pub type TCOD_colctrl_t = libc::c_uint;
pub const TCOD_BKGND_NONE: TCOD_bkgnd_flag_t = 0;
pub const TCOD_BKGND_SET: TCOD_bkgnd_flag_t = 1;
pub const TCOD_BKGND_MULTIPLY: TCOD_bkgnd_flag_t = 2;
pub const TCOD_BKGND_LIGHTEN: TCOD_bkgnd_flag_t = 3;
pub const TCOD_BKGND_DARKEN: TCOD_bkgnd_flag_t = 4;
pub const TCOD_BKGND_SCREEN: TCOD_bkgnd_flag_t = 5;
pub const TCOD_BKGND_COLOR_DODGE: TCOD_bkgnd_flag_t = 6;
pub const TCOD_BKGND_COLOR_BURN: TCOD_bkgnd_flag_t = 7;
pub const TCOD_BKGND_ADD: TCOD_bkgnd_flag_t = 8;
pub const TCOD_BKGND_ADDA: TCOD_bkgnd_flag_t = 9;
pub const TCOD_BKGND_BURN: TCOD_bkgnd_flag_t = 10;
pub const TCOD_BKGND_OVERLAY: TCOD_bkgnd_flag_t = 11;
pub const TCOD_BKGND_ALPH: TCOD_bkgnd_flag_t = 12;
pub const TCOD_BKGND_DEFAULT: TCOD_bkgnd_flag_t = 13;
pub type TCOD_bkgnd_flag_t = libc::c_uint;
pub const TCOD_KEY_PRESSED: TCOD_key_status_t = 1;
pub const TCOD_KEY_RELEASED: TCOD_key_status_t = 2;
pub type TCOD_key_status_t = libc::c_uint;
pub const TCOD_FONT_LAYOUT_ASCII_INCOL: TCOD_font_flags_t = 1;
pub const TCOD_FONT_LAYOUT_ASCII_INROW: TCOD_font_flags_t = 2;
pub const TCOD_FONT_TYPE_GREYSCALE: TCOD_font_flags_t = 4;
pub const TCOD_FONT_TYPE_GRAYSCALE: TCOD_font_flags_t = 4;
pub const TCOD_FONT_LAYOUT_TCOD: TCOD_font_flags_t = 8;
pub type TCOD_font_flags_t = libc::c_uint;
pub const TCOD_RENDERER_GLSL: TCOD_renderer_t = 0;
pub const TCOD_RENDERER_OPENGL: TCOD_renderer_t = 1;
pub const TCOD_RENDERER_SDL: TCOD_renderer_t = 2;
pub const TCOD_NB_RENDERERS: TCOD_renderer_t = 3;
pub type TCOD_renderer_t = libc::c_uint;
pub const TCOD_LEFT: TCOD_alignment_t = 0;
pub const TCOD_RIGHT: TCOD_alignment_t = 1;
pub const TCOD_CENTER: TCOD_alignment_t = 2;
pub type TCOD_alignment_t = libc::c_uint;
pub type TCOD_image_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_image_new(width: libc::c_int, height: libc::c_int)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_from_console(console: TCOD_console_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_refresh_console(image: TCOD_image_t,
                                      console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_image_load(filename: *const libc::c_char) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_image_clear(image: TCOD_image_t, color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_invert(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_hflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_rotate90(image: TCOD_image_t,
                               numRotations: libc::c_int);
}
extern "C" {
    pub fn TCOD_image_vflip(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_scale(image: TCOD_image_t, neww: libc::c_int,
                            newh: libc::c_int);
}
extern "C" {
    pub fn TCOD_image_save(image: TCOD_image_t,
                           filename: *const libc::c_char);
}
extern "C" {
    pub fn TCOD_image_get_size(image: TCOD_image_t, w: *mut libc::c_int,
                               h: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_image_get_pixel(image: TCOD_image_t, x: libc::c_int,
                                y: libc::c_int) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_get_alpha(image: TCOD_image_t, x: libc::c_int,
                                y: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_image_get_mipmap_pixel(image: TCOD_image_t, x0: f32, y0: f32,
                                       x1: f32, y1: f32) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_image_put_pixel(image: TCOD_image_t, x: libc::c_int,
                                y: libc::c_int, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_blit(image: TCOD_image_t, console: TCOD_console_t,
                           x: f32, y: f32, bkgnd_flag: TCOD_bkgnd_flag_t,
                           scalex: f32, scaley: f32, angle: f32);
}
extern "C" {
    pub fn TCOD_image_blit_rect(image: TCOD_image_t, console: TCOD_console_t,
                                x: libc::c_int, y: libc::c_int,
                                w: libc::c_int, h: libc::c_int,
                                bkgnd_flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_image_blit_2x(image: TCOD_image_t, dest: TCOD_console_t,
                              dx: libc::c_int, dy: libc::c_int,
                              sx: libc::c_int, sy: libc::c_int,
                              w: libc::c_int, h: libc::c_int);
}
extern "C" {
    pub fn TCOD_image_delete(image: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_image_set_key_color(image: TCOD_image_t,
                                    key_color: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_image_is_pixel_transparent(image: TCOD_image_t,
                                           x: libc::c_int, y: libc::c_int)
     -> bool;
}
pub type TCOD_list_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_list_new() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_allocate(nb_elements: libc::c_int) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_duplicate(l: TCOD_list_t) -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_list_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_push(l: TCOD_list_t, elt: *const libc::c_void);
}
extern "C" {
    pub fn TCOD_list_pop(l: TCOD_list_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_peek(l: TCOD_list_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_add_all(l: TCOD_list_t, l2: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_get(l: TCOD_list_t, idx: libc::c_int)
     -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_set(l: TCOD_list_t, elt: *const libc::c_void,
                         idx: libc::c_int);
}
extern "C" {
    pub fn TCOD_list_begin(l: TCOD_list_t) -> *mut *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_end(l: TCOD_list_t) -> *mut *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_reverse(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_remove_iterator(l: TCOD_list_t,
                                     elt: *mut *mut libc::c_void)
     -> *mut *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_remove(l: TCOD_list_t, elt: *const libc::c_void);
}
extern "C" {
    pub fn TCOD_list_remove_iterator_fast(l: TCOD_list_t,
                                          elt: *mut *mut libc::c_void)
     -> *mut *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_remove_fast(l: TCOD_list_t, elt: *const libc::c_void);
}
extern "C" {
    pub fn TCOD_list_contains(l: TCOD_list_t, elt: *const libc::c_void)
     -> bool;
}
extern "C" {
    pub fn TCOD_list_clear(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_clear_and_delete(l: TCOD_list_t);
}
extern "C" {
    pub fn TCOD_list_size(l: TCOD_list_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_list_insert_before(l: TCOD_list_t, elt: *const libc::c_void,
                                   before: libc::c_int)
     -> *mut *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_list_is_empty(l: TCOD_list_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_init_root(w: libc::c_int, h: libc::c_int,
                                  title: *const libc::c_char,
                                  fullscreen: bool,
                                  renderer: TCOD_renderer_t);
}
extern "C" {
    pub fn TCOD_console_set_window_title(title: *const libc::c_char);
}
extern "C" {
    pub fn TCOD_console_set_fullscreen(fullscreen: bool);
}
extern "C" {
    pub fn TCOD_console_is_fullscreen() -> bool;
}
extern "C" {
    pub fn TCOD_console_is_window_closed() -> bool;
}
extern "C" {
    pub fn TCOD_console_has_mouse_focus() -> bool;
}
extern "C" {
    pub fn TCOD_console_is_active() -> bool;
}
extern "C" {
    pub fn TCOD_console_set_custom_font(fontFile: *const libc::c_char,
                                        flags: libc::c_int,
                                        nb_char_horiz: libc::c_int,
                                        nb_char_vertic: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_map_ascii_code_to_font(asciiCode: libc::c_int,
                                               fontCharX: libc::c_int,
                                               fontCharY: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_map_ascii_codes_to_font(asciiCode: libc::c_int,
                                                nbCodes: libc::c_int,
                                                fontCharX: libc::c_int,
                                                fontCharY: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_map_string_to_font(s: *const libc::c_char,
                                           fontCharX: libc::c_int,
                                           fontCharY: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_set_dirty(x: libc::c_int, y: libc::c_int,
                                  w: libc::c_int, h: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_set_default_background(con: TCOD_console_t,
                                               col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_default_foreground(con: TCOD_console_t,
                                               col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_clear(con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_set_char_background(con: TCOD_console_t,
                                            x: libc::c_int, y: libc::c_int,
                                            col: TCOD_color_t,
                                            flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_set_char_foreground(con: TCOD_console_t,
                                            x: libc::c_int, y: libc::c_int,
                                            col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_char(con: TCOD_console_t, x: libc::c_int,
                                 y: libc::c_int, c: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_put_char(con: TCOD_console_t, x: libc::c_int,
                                 y: libc::c_int, c: libc::c_int,
                                 flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_put_char_ex(con: TCOD_console_t, x: libc::c_int,
                                    y: libc::c_int, c: libc::c_int,
                                    fore: TCOD_color_t, back: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_set_background_flag(con: TCOD_console_t,
                                            flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_get_background_flag(con: TCOD_console_t)
     -> TCOD_bkgnd_flag_t;
}
extern "C" {
    pub fn TCOD_console_set_alignment(con: TCOD_console_t,
                                      alignment: TCOD_alignment_t);
}
extern "C" {
    pub fn TCOD_console_get_alignment(con: TCOD_console_t)
     -> TCOD_alignment_t;
}
extern "C" {
    pub fn TCOD_console_print(con: TCOD_console_t, x: libc::c_int,
                              y: libc::c_int, fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_print_ex(con: TCOD_console_t, x: libc::c_int,
                                 y: libc::c_int, flag: TCOD_bkgnd_flag_t,
                                 alignment: TCOD_alignment_t,
                                 fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_print_rect(con: TCOD_console_t, x: libc::c_int,
                                   y: libc::c_int, w: libc::c_int,
                                   h: libc::c_int,
                                   fmt: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex(con: TCOD_console_t, x: libc::c_int,
                                      y: libc::c_int, w: libc::c_int,
                                      h: libc::c_int, flag: TCOD_bkgnd_flag_t,
                                      alignment: TCOD_alignment_t,
                                      fmt: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect(con: TCOD_console_t, x: libc::c_int,
                                        y: libc::c_int, w: libc::c_int,
                                        h: libc::c_int,
                                        fmt: *const libc::c_char, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_rect(con: TCOD_console_t, x: libc::c_int,
                             y: libc::c_int, w: libc::c_int, h: libc::c_int,
                             clear: bool, flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_hline(con: TCOD_console_t, x: libc::c_int,
                              y: libc::c_int, l: libc::c_int,
                              flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_vline(con: TCOD_console_t, x: libc::c_int,
                              y: libc::c_int, l: libc::c_int,
                              flag: TCOD_bkgnd_flag_t);
}
extern "C" {
    pub fn TCOD_console_print_frame(con: TCOD_console_t, x: libc::c_int,
                                    y: libc::c_int, w: libc::c_int,
                                    h: libc::c_int, empty: bool,
                                    flag: TCOD_bkgnd_flag_t,
                                    fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn TCOD_console_map_string_to_font_utf(s: *const wchar_t,
                                               fontCharX: libc::c_int,
                                               fontCharY: libc::c_int);
}
extern "C" {
    pub fn TCOD_console_print_utf(con: TCOD_console_t, x: libc::c_int,
                                  y: libc::c_int, fmt: *const wchar_t, ...);
}
extern "C" {
    pub fn TCOD_console_print_ex_utf(con: TCOD_console_t, x: libc::c_int,
                                     y: libc::c_int, flag: TCOD_bkgnd_flag_t,
                                     alignment: TCOD_alignment_t,
                                     fmt: *const wchar_t, ...);
}
extern "C" {
    pub fn TCOD_console_print_rect_utf(con: TCOD_console_t, x: libc::c_int,
                                       y: libc::c_int, w: libc::c_int,
                                       h: libc::c_int,
                                       fmt: *const wchar_t, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_print_rect_ex_utf(con: TCOD_console_t, x: libc::c_int,
                                          y: libc::c_int, w: libc::c_int,
                                          h: libc::c_int,
                                          flag: TCOD_bkgnd_flag_t,
                                          alignment: TCOD_alignment_t,
                                          fmt: *const wchar_t, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height_rect_utf(con: TCOD_console_t,
                                            x: libc::c_int, y: libc::c_int,
                                            w: libc::c_int, h: libc::c_int,
                                            fmt: *const wchar_t, ...)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_get_default_background(con: TCOD_console_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_default_foreground(con: TCOD_console_t)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_background(con: TCOD_console_t,
                                            x: libc::c_int, y: libc::c_int)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char_foreground(con: TCOD_console_t,
                                            x: libc::c_int, y: libc::c_int)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_get_char(con: TCOD_console_t, x: libc::c_int,
                                 y: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_get_background_color_image(con: TCOD_console_t)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_get_foreground_color_image(con: TCOD_console_t)
     -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_console_set_fade(val: u8, fade: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_get_fade() -> u8;
}
extern "C" {
    pub fn TCOD_console_get_fading_color() -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_console_flush();
}
extern "C" {
    pub fn TCOD_console_set_color_control(con: TCOD_colctrl_t,
                                          fore: TCOD_color_t,
                                          back: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_check_for_keypress(flags: libc::c_int) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_wait_for_keypress(flush: bool) -> TCOD_key_t;
}
extern "C" {
    pub fn TCOD_console_is_key_pressed(key: TCOD_keycode_t) -> bool;
}
extern "C" {
    pub fn TCOD_console_from_file(filename: *const libc::c_char)
     -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_asc(con: TCOD_console_t,
                                 filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_console_load_apf(con: TCOD_console_t,
                                 filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_asc(con: TCOD_console_t,
                                 filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_apf(con: TCOD_console_t,
                                 filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_console_new(w: libc::c_int, h: libc::c_int) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_get_width(con: TCOD_console_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_get_height(con: TCOD_console_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_console_set_key_color(con: TCOD_console_t, col: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_console_blit(src: TCOD_console_t, xSrc: libc::c_int,
                             ySrc: libc::c_int, wSrc: libc::c_int,
                             hSrc: libc::c_int, dst: TCOD_console_t,
                             xDst: libc::c_int, yDst: libc::c_int,
                             foreground_alpha: f32, background_alpha: f32);
}
extern "C" {
    pub fn TCOD_console_delete(console: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_console_credits();
}
extern "C" {
    pub fn TCOD_console_credits_reset();
}
extern "C" {
    pub fn TCOD_console_credits_render(x: libc::c_int, y: libc::c_int,
                                       alpha: bool) -> bool;
}
extern "C" {
    pub fn TCOD_console_from_xp(filename: *const libc::c_char)
     -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_console_load_xp(con: TCOD_console_t,
                                filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_console_save_xp(con: TCOD_console_t,
                                filename: *const libc::c_char,
                                compress_level: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_console_list_from_xp(filename: *const libc::c_char)
     -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_console_list_save_xp(console_list: TCOD_list_t,
                                     filename: *const libc::c_char,
                                     compress_level: libc::c_int) -> bool;
}
pub type TCOD_map_t = *mut libc::c_void;
pub const FOV_BASIC: TCOD_fov_algorithm_t = 0;
pub const FOV_DIAMOND: TCOD_fov_algorithm_t = 1;
pub const FOV_SHADOW: TCOD_fov_algorithm_t = 2;
pub const FOV_PERMISSIVE_0: TCOD_fov_algorithm_t = 3;
pub const FOV_PERMISSIVE_1: TCOD_fov_algorithm_t = 4;
pub const FOV_PERMISSIVE_2: TCOD_fov_algorithm_t = 5;
pub const FOV_PERMISSIVE_3: TCOD_fov_algorithm_t = 6;
pub const FOV_PERMISSIVE_4: TCOD_fov_algorithm_t = 7;
pub const FOV_PERMISSIVE_5: TCOD_fov_algorithm_t = 8;
pub const FOV_PERMISSIVE_6: TCOD_fov_algorithm_t = 9;
pub const FOV_PERMISSIVE_7: TCOD_fov_algorithm_t = 10;
pub const FOV_PERMISSIVE_8: TCOD_fov_algorithm_t = 11;
pub const FOV_RESTRICTIVE: TCOD_fov_algorithm_t = 12;
pub const NB_FOV_ALGORITHMS: TCOD_fov_algorithm_t = 13;
pub type TCOD_fov_algorithm_t = libc::c_uint;
extern "C" {
    pub fn TCOD_map_new(width: libc::c_int, height: libc::c_int)
     -> TCOD_map_t;
}
extern "C" {
    pub fn TCOD_map_clear(map: TCOD_map_t, transparent: bool, walkable: bool);
}
extern "C" {
    pub fn TCOD_map_copy(source: TCOD_map_t, dest: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_set_properties(map: TCOD_map_t, x: libc::c_int,
                                   y: libc::c_int, is_transparent: bool,
                                   is_walkable: bool);
}
extern "C" {
    pub fn TCOD_map_delete(map: TCOD_map_t);
}
extern "C" {
    pub fn TCOD_map_compute_fov(map: TCOD_map_t, player_x: libc::c_int,
                                player_y: libc::c_int,
                                max_radius: libc::c_int, light_walls: bool,
                                algo: TCOD_fov_algorithm_t);
}
extern "C" {
    pub fn TCOD_map_is_in_fov(map: TCOD_map_t, x: libc::c_int, y: libc::c_int)
     -> bool;
}
extern "C" {
    pub fn TCOD_map_set_in_fov(map: TCOD_map_t, x: libc::c_int,
                               y: libc::c_int, fov: bool);
}
extern "C" {
    pub fn TCOD_map_is_transparent(map: TCOD_map_t, x: libc::c_int,
                                   y: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_map_is_walkable(map: TCOD_map_t, x: libc::c_int,
                                y: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_map_get_width(map: TCOD_map_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_map_get_height(map: TCOD_map_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_map_get_nb_cells(map: TCOD_map_t) -> libc::c_int;
}
pub type TCOD_noise_t = *mut libc::c_void;
pub const TCOD_NOISE_PERLIN: TCOD_noise_type_t = 1;
pub const TCOD_NOISE_SIMPLEX: TCOD_noise_type_t = 2;
pub const TCOD_NOISE_WAVELET: TCOD_noise_type_t = 4;
pub const TCOD_NOISE_DEFAULT: TCOD_noise_type_t = 0;
pub type TCOD_noise_type_t = libc::c_uint;
extern "C" {
    pub fn TCOD_noise_new(dimensions: libc::c_int, hurst: f32,
                          lacunarity: f32, random: TCOD_random_t)
     -> TCOD_noise_t;
}
extern "C" {
    pub fn TCOD_noise_set_type(noise: TCOD_noise_t, type_: TCOD_noise_type_t);
}
extern "C" {
    pub fn TCOD_noise_get_ex(noise: TCOD_noise_t, f: *mut f32,
                             type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm_ex(noise: TCOD_noise_t, f: *mut f32,
                                 octaves: f32, type_: TCOD_noise_type_t)
     -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence_ex(noise: TCOD_noise_t, f: *mut f32,
                                        octaves: f32,
                                        type_: TCOD_noise_type_t) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get(noise: TCOD_noise_t, f: *mut f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_fbm(noise: TCOD_noise_t, f: *mut f32, octaves: f32)
     -> f32;
}
extern "C" {
    pub fn TCOD_noise_get_turbulence(noise: TCOD_noise_t, f: *mut f32,
                                     octaves: f32) -> f32;
}
extern "C" {
    pub fn TCOD_noise_delete(noise: TCOD_noise_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_heightmap_t {
    pub w: libc::c_int,
    pub h: libc::c_int,
    pub values: *mut f32,
}
#[test]
fn bindgen_test_layout_TCOD_heightmap_t() {
    assert_eq!(::std::mem::size_of::<TCOD_heightmap_t>() , 16usize , concat !
               ( "Size of: " , stringify ! ( TCOD_heightmap_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_heightmap_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( TCOD_heightmap_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_heightmap_t ) ) . w as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_heightmap_t ) ,
                "::" , stringify ! ( w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_heightmap_t ) ) . h as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_heightmap_t ) ,
                "::" , stringify ! ( h ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_heightmap_t ) ) . values as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_heightmap_t ) ,
                "::" , stringify ! ( values ) ));
}
impl Clone for TCOD_heightmap_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_heightmap_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn TCOD_heightmap_new(w: libc::c_int, h: libc::c_int)
     -> *mut TCOD_heightmap_t;
}
extern "C" {
    pub fn TCOD_heightmap_delete(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_get_value(hm: *const TCOD_heightmap_t,
                                    x: libc::c_int, y: libc::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_interpolated_value(hm: *const TCOD_heightmap_t,
                                                 x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_set_value(hm: *mut TCOD_heightmap_t, x: libc::c_int,
                                    y: libc::c_int, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_get_slope(hm: *const TCOD_heightmap_t,
                                    x: libc::c_int, y: libc::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_heightmap_get_normal(hm: *const TCOD_heightmap_t, x: f32,
                                     y: f32, n: *mut f32, waterLevel: f32);
}
extern "C" {
    pub fn TCOD_heightmap_count_cells(hm: *const TCOD_heightmap_t, min: f32,
                                      max: f32) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_heightmap_has_land_on_border(hm: *const TCOD_heightmap_t,
                                             waterLevel: f32) -> bool;
}
extern "C" {
    pub fn TCOD_heightmap_get_minmax(hm: *const TCOD_heightmap_t,
                                     min: *mut f32, max: *mut f32);
}
extern "C" {
    pub fn TCOD_heightmap_copy(hm_source: *const TCOD_heightmap_t,
                               hm_dest: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale(hm: *mut TCOD_heightmap_t, value: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clamp(hm: *mut TCOD_heightmap_t, min: f32,
                                max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_normalize(hm: *mut TCOD_heightmap_t, min: f32,
                                    max: f32);
}
extern "C" {
    pub fn TCOD_heightmap_clear(hm: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_lerp_hm(hm1: *const TCOD_heightmap_t,
                                  hm2: *const TCOD_heightmap_t,
                                  hmres: *mut TCOD_heightmap_t, coef: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_hm(hm1: *const TCOD_heightmap_t,
                                 hm2: *const TCOD_heightmap_t,
                                 hmres: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_multiply_hm(hm1: *const TCOD_heightmap_t,
                                      hm2: *const TCOD_heightmap_t,
                                      hmres: *mut TCOD_heightmap_t);
}
extern "C" {
    pub fn TCOD_heightmap_add_hill(hm: *mut TCOD_heightmap_t, hx: f32,
                                   hy: f32, hradius: f32, hheight: f32);
}
extern "C" {
    pub fn TCOD_heightmap_dig_hill(hm: *mut TCOD_heightmap_t, hx: f32,
                                   hy: f32, hradius: f32, hheight: f32);
}
extern "C" {
    pub fn TCOD_heightmap_dig_bezier(hm: *mut TCOD_heightmap_t,
                                     px: *mut libc::c_int,
                                     py: *mut libc::c_int, startRadius: f32,
                                     startDepth: f32, endRadius: f32,
                                     endDepth: f32);
}
extern "C" {
    pub fn TCOD_heightmap_rain_erosion(hm: *mut TCOD_heightmap_t,
                                       nbDrops: libc::c_int, erosionCoef: f32,
                                       sedimentationCoef: f32,
                                       rnd: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_heightmap_kernel_transform(hm: *mut TCOD_heightmap_t,
                                           kernelsize: libc::c_int,
                                           dx: *const libc::c_int,
                                           dy: *const libc::c_int,
                                           weight: *const f32, minLevel: f32,
                                           maxLevel: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_voronoi(hm: *mut TCOD_heightmap_t,
                                      nbPoints: libc::c_int,
                                      nbCoef: libc::c_int, coef: *const f32,
                                      rnd: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_heightmap_mid_point_displacement(hm: *mut TCOD_heightmap_t,
                                                 rnd: TCOD_random_t,
                                                 roughness: f32);
}
extern "C" {
    pub fn TCOD_heightmap_add_fbm(hm: *mut TCOD_heightmap_t,
                                  noise: TCOD_noise_t, mulx: f32, muly: f32,
                                  addx: f32, addy: f32, octaves: f32,
                                  delta: f32, scale: f32);
}
extern "C" {
    pub fn TCOD_heightmap_scale_fbm(hm: *mut TCOD_heightmap_t,
                                    noise: TCOD_noise_t, mulx: f32, muly: f32,
                                    addx: f32, addy: f32, octaves: f32,
                                    delta: f32, scale: f32);
}
extern "C" {
    pub fn TCOD_heightmap_islandify(hm: *mut TCOD_heightmap_t, seaLevel: f32,
                                    rnd: TCOD_random_t);
}
#[repr(C)]
pub struct TCOD_lex_t {
    pub file_line: libc::c_int,
    pub token_type: libc::c_int,
    pub token_int_val: libc::c_int,
    pub token_idx: libc::c_int,
    pub token_float_val: f32,
    pub tok: *mut libc::c_char,
    pub toklen: libc::c_int,
    pub lastStringDelim: libc::c_char,
    pub pos: *mut libc::c_char,
    pub buf: *mut libc::c_char,
    pub filename: *mut libc::c_char,
    pub last_javadoc_comment: *mut libc::c_char,
    pub nb_symbols: libc::c_int,
    pub nb_keywords: libc::c_int,
    pub flags: libc::c_int,
    pub symbols: [[libc::c_char; 5usize]; 100usize],
    pub keywords: [[libc::c_char; 20usize]; 100usize],
    pub simpleCmt: *const libc::c_char,
    pub cmtStart: *const libc::c_char,
    pub cmtStop: *const libc::c_char,
    pub javadocCmtStart: *const libc::c_char,
    pub stringDelim: *const libc::c_char,
    pub javadoc_read: bool,
    pub allocBuf: bool,
    pub savept: bool,
}
#[test]
fn bindgen_test_layout_TCOD_lex_t() {
    assert_eq!(::std::mem::size_of::<TCOD_lex_t>() , 2632usize , concat ! (
               "Size of: " , stringify ! ( TCOD_lex_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_lex_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_lex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . file_line as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( file_line ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . token_type as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( token_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . token_int_val as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( token_int_val ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . token_idx as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( token_idx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . token_float_val as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( token_float_val ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . tok as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( tok ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . toklen as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( toklen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . lastStringDelim as *
                const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( lastStringDelim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . pos as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . buf as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . filename as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( filename ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . last_javadoc_comment as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( last_javadoc_comment ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . nb_symbols as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( nb_symbols ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . nb_keywords as * const _
                as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( nb_keywords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . flags as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . symbols as * const _ as
                usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( symbols ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . keywords as * const _ as
                usize } , 584usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( keywords ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . simpleCmt as * const _
                as usize } , 2584usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( simpleCmt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . cmtStart as * const _ as
                usize } , 2592usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( cmtStart ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . cmtStop as * const _ as
                usize } , 2600usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( cmtStop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . javadocCmtStart as *
                const _ as usize } , 2608usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( javadocCmtStart ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . stringDelim as * const _
                as usize } , 2616usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( stringDelim ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . javadoc_read as * const
                _ as usize } , 2624usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( javadoc_read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . allocBuf as * const _ as
                usize } , 2625usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( allocBuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_lex_t ) ) . savept as * const _ as
                usize } , 2626usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_lex_t ) , "::" ,
                stringify ! ( savept ) ));
}
impl Default for TCOD_lex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn TCOD_lex_new_intern() -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_new(symbols: *mut *const libc::c_char,
                        keywords: *mut *const libc::c_char,
                        simpleComment: *const libc::c_char,
                        commentStart: *const libc::c_char,
                        commentStop: *const libc::c_char,
                        javadocCommentStart: *const libc::c_char,
                        stringDelim: *const libc::c_char, flags: libc::c_int)
     -> *mut TCOD_lex_t;
}
extern "C" {
    pub fn TCOD_lex_delete(lex: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_set_data_buffer(lex: *mut TCOD_lex_t,
                                    dat: *mut libc::c_char);
}
extern "C" {
    pub fn TCOD_lex_set_data_file(lex: *mut TCOD_lex_t,
                                  filename: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_lex_parse(lex: *mut TCOD_lex_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_type(lex: *mut TCOD_lex_t,
                                           token_type: libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_lex_parse_until_token_value(lex: *mut TCOD_lex_t,
                                            token_value: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_lex_expect_token_type(lex: *mut TCOD_lex_t,
                                      token_type: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_lex_expect_token_value(lex: *mut TCOD_lex_t,
                                       token_type: libc::c_int,
                                       token_value: *const libc::c_char)
     -> bool;
}
extern "C" {
    pub fn TCOD_lex_savepoint(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_restore(lex: *mut TCOD_lex_t, savept: *mut TCOD_lex_t);
}
extern "C" {
    pub fn TCOD_lex_get_last_javadoc(lex: *mut TCOD_lex_t)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_token_name(token_type: libc::c_int)
     -> *const libc::c_char;
}
extern "C" {
    pub fn TCOD_lex_get_last_error() -> *mut libc::c_char;
}
extern "C" {
    pub fn TCOD_lex_hextoint(c: libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_random_get_instance() -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_new(algo: TCOD_random_algo_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_save(mersenne: TCOD_random_t) -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_restore(mersenne: TCOD_random_t,
                               backup: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_new_from_seed(algo: TCOD_random_algo_t, seed: u32)
     -> TCOD_random_t;
}
extern "C" {
    pub fn TCOD_random_delete(mersenne: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_random_set_distribution(mersenne: TCOD_random_t,
                                        distribution: TCOD_distribution_t);
}
extern "C" {
    pub fn TCOD_random_get_int(mersenne: TCOD_random_t, min: libc::c_int,
                               max: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float(mersenne: TCOD_random_t, min: f32, max: f32)
     -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double(mersenne: TCOD_random_t, min: f64, max: f64)
     -> f64;
}
extern "C" {
    pub fn TCOD_random_get_int_mean(mersenne: TCOD_random_t, min: libc::c_int,
                                    max: libc::c_int, mean: libc::c_int)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_random_get_float_mean(mersenne: TCOD_random_t, min: f32,
                                      max: f32, mean: f32) -> f32;
}
extern "C" {
    pub fn TCOD_random_get_double_mean(mersenne: TCOD_random_t, min: f64,
                                       max: f64, mean: f64) -> f64;
}
extern "C" {
    pub fn TCOD_random_dice_new(s: *const libc::c_char) -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_random_dice_roll(mersenne: TCOD_random_t, dice: TCOD_dice_t)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_random_dice_roll_s(mersenne: TCOD_random_t,
                                   s: *const libc::c_char) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_mouse_t {
    pub x: libc::c_int,
    pub y: libc::c_int,
    pub dx: libc::c_int,
    pub dy: libc::c_int,
    pub cx: libc::c_int,
    pub cy: libc::c_int,
    pub dcx: libc::c_int,
    pub dcy: libc::c_int,
    pub lbutton: bool,
    pub rbutton: bool,
    pub mbutton: bool,
    pub lbutton_pressed: bool,
    pub rbutton_pressed: bool,
    pub mbutton_pressed: bool,
    pub wheel_up: bool,
    pub wheel_down: bool,
}
#[test]
fn bindgen_test_layout_TCOD_mouse_t() {
    assert_eq!(::std::mem::size_of::<TCOD_mouse_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( TCOD_mouse_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_mouse_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_mouse_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . y as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . dx as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( dx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . dy as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( dy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . cx as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( cx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . cy as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( cy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . dcx as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( dcx ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . dcy as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( dcy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . lbutton as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( lbutton ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . rbutton as * const _
                as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( rbutton ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . mbutton as * const _
                as usize } , 34usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( mbutton ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . lbutton_pressed as *
                const _ as usize } , 35usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( lbutton_pressed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . rbutton_pressed as *
                const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( rbutton_pressed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . mbutton_pressed as *
                const _ as usize } , 37usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( mbutton_pressed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . wheel_up as * const _
                as usize } , 38usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( wheel_up ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_mouse_t ) ) . wheel_down as * const
                _ as usize } , 39usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_mouse_t ) , "::" ,
                stringify ! ( wheel_down ) ));
}
impl Clone for TCOD_mouse_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn TCOD_mouse_show_cursor(visible: bool);
}
extern "C" {
    pub fn TCOD_mouse_get_status() -> TCOD_mouse_t;
}
extern "C" {
    pub fn TCOD_mouse_is_cursor_visible() -> bool;
}
extern "C" {
    pub fn TCOD_mouse_move(x: libc::c_int, y: libc::c_int);
}
extern "C" {
    pub fn TCOD_mouse_includes_touch(enable: bool);
}
pub type TCOD_namegen_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_namegen_parse(filename: *const libc::c_char,
                              random: TCOD_random_t);
}
extern "C" {
    pub fn TCOD_namegen_generate(name: *mut libc::c_char, allocate: bool)
     -> *mut libc::c_char;
}
extern "C" {
    pub fn TCOD_namegen_generate_custom(name: *mut libc::c_char,
                                        rule: *mut libc::c_char,
                                        allocate: bool) -> *mut libc::c_char;
}
extern "C" {
    pub fn TCOD_namegen_get_sets() -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_namegen_destroy();
}
pub type TCOD_path_func_t =
    ::std::option::Option<unsafe extern "C" fn(xFrom: libc::c_int,
                                               yFrom: libc::c_int,
                                               xTo: libc::c_int,
                                               yTo: libc::c_int,
                                               user_data: *mut libc::c_void)
                              -> f32>;
pub type TCOD_path_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_path_new_using_map(map: TCOD_map_t, diagonalCost: f32)
     -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_new_using_function(map_width: libc::c_int,
                                        map_height: libc::c_int,
                                        func: TCOD_path_func_t,
                                        user_data: *mut libc::c_void,
                                        diagonalCost: f32) -> TCOD_path_t;
}
extern "C" {
    pub fn TCOD_path_compute(path: TCOD_path_t, ox: libc::c_int,
                             oy: libc::c_int, dx: libc::c_int,
                             dy: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_path_walk(path: TCOD_path_t, x: *mut libc::c_int,
                          y: *mut libc::c_int, recalculate_when_needed: bool)
     -> bool;
}
extern "C" {
    pub fn TCOD_path_is_empty(path: TCOD_path_t) -> bool;
}
extern "C" {
    pub fn TCOD_path_size(path: TCOD_path_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_path_reverse(path: TCOD_path_t);
}
extern "C" {
    pub fn TCOD_path_get(path: TCOD_path_t, index: libc::c_int,
                         x: *mut libc::c_int, y: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_path_get_origin(path: TCOD_path_t, x: *mut libc::c_int,
                                y: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_path_get_destination(path: TCOD_path_t, x: *mut libc::c_int,
                                     y: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_path_delete(path: TCOD_path_t);
}
pub type TCOD_dijkstra_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_dijkstra_new(map: TCOD_map_t, diagonalCost: f32)
     -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_new_using_function(map_width: libc::c_int,
                                            map_height: libc::c_int,
                                            func: TCOD_path_func_t,
                                            user_data: *mut libc::c_void,
                                            diagonalCost: f32)
     -> TCOD_dijkstra_t;
}
extern "C" {
    pub fn TCOD_dijkstra_compute(dijkstra: TCOD_dijkstra_t,
                                 root_x: libc::c_int, root_y: libc::c_int);
}
extern "C" {
    pub fn TCOD_dijkstra_get_distance(dijkstra: TCOD_dijkstra_t,
                                      x: libc::c_int, y: libc::c_int) -> f32;
}
extern "C" {
    pub fn TCOD_dijkstra_path_set(dijkstra: TCOD_dijkstra_t, x: libc::c_int,
                                  y: libc::c_int) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_is_empty(path: TCOD_dijkstra_t) -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_size(path: TCOD_dijkstra_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_dijkstra_reverse(path: TCOD_dijkstra_t);
}
extern "C" {
    pub fn TCOD_dijkstra_get(path: TCOD_dijkstra_t, index: libc::c_int,
                             x: *mut libc::c_int, y: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_dijkstra_path_walk(dijkstra: TCOD_dijkstra_t,
                                   x: *mut libc::c_int, y: *mut libc::c_int)
     -> bool;
}
extern "C" {
    pub fn TCOD_dijkstra_delete(dijkstra: TCOD_dijkstra_t);
}
pub const TCOD_TYPE_NONE: TCOD_value_type_t = 0;
pub const TCOD_TYPE_BOOL: TCOD_value_type_t = 1;
pub const TCOD_TYPE_CHAR: TCOD_value_type_t = 2;
pub const TCOD_TYPE_INT: TCOD_value_type_t = 3;
pub const TCOD_TYPE_FLOAT: TCOD_value_type_t = 4;
pub const TCOD_TYPE_STRING: TCOD_value_type_t = 5;
pub const TCOD_TYPE_COLOR: TCOD_value_type_t = 6;
pub const TCOD_TYPE_DICE: TCOD_value_type_t = 7;
pub const TCOD_TYPE_VALUELIST00: TCOD_value_type_t = 8;
pub const TCOD_TYPE_VALUELIST01: TCOD_value_type_t = 9;
pub const TCOD_TYPE_VALUELIST02: TCOD_value_type_t = 10;
pub const TCOD_TYPE_VALUELIST03: TCOD_value_type_t = 11;
pub const TCOD_TYPE_VALUELIST04: TCOD_value_type_t = 12;
pub const TCOD_TYPE_VALUELIST05: TCOD_value_type_t = 13;
pub const TCOD_TYPE_VALUELIST06: TCOD_value_type_t = 14;
pub const TCOD_TYPE_VALUELIST07: TCOD_value_type_t = 15;
pub const TCOD_TYPE_VALUELIST08: TCOD_value_type_t = 16;
pub const TCOD_TYPE_VALUELIST09: TCOD_value_type_t = 17;
pub const TCOD_TYPE_VALUELIST10: TCOD_value_type_t = 18;
pub const TCOD_TYPE_VALUELIST11: TCOD_value_type_t = 19;
pub const TCOD_TYPE_VALUELIST12: TCOD_value_type_t = 20;
pub const TCOD_TYPE_VALUELIST13: TCOD_value_type_t = 21;
pub const TCOD_TYPE_VALUELIST14: TCOD_value_type_t = 22;
pub const TCOD_TYPE_VALUELIST15: TCOD_value_type_t = 23;
pub const TCOD_TYPE_CUSTOM00: TCOD_value_type_t = 24;
pub const TCOD_TYPE_CUSTOM01: TCOD_value_type_t = 25;
pub const TCOD_TYPE_CUSTOM02: TCOD_value_type_t = 26;
pub const TCOD_TYPE_CUSTOM03: TCOD_value_type_t = 27;
pub const TCOD_TYPE_CUSTOM04: TCOD_value_type_t = 28;
pub const TCOD_TYPE_CUSTOM05: TCOD_value_type_t = 29;
pub const TCOD_TYPE_CUSTOM06: TCOD_value_type_t = 30;
pub const TCOD_TYPE_CUSTOM07: TCOD_value_type_t = 31;
pub const TCOD_TYPE_CUSTOM08: TCOD_value_type_t = 32;
pub const TCOD_TYPE_CUSTOM09: TCOD_value_type_t = 33;
pub const TCOD_TYPE_CUSTOM10: TCOD_value_type_t = 34;
pub const TCOD_TYPE_CUSTOM11: TCOD_value_type_t = 35;
pub const TCOD_TYPE_CUSTOM12: TCOD_value_type_t = 36;
pub const TCOD_TYPE_CUSTOM13: TCOD_value_type_t = 37;
pub const TCOD_TYPE_CUSTOM14: TCOD_value_type_t = 38;
pub const TCOD_TYPE_CUSTOM15: TCOD_value_type_t = 39;
pub const TCOD_TYPE_LIST: TCOD_value_type_t = 1024;
pub type TCOD_value_type_t = libc::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy)]
pub struct TCOD_value_t {
    pub b: __BindgenUnionField<bool>,
    pub c: __BindgenUnionField<libc::c_char>,
    pub i: __BindgenUnionField<i32>,
    pub f: __BindgenUnionField<f32>,
    pub s: __BindgenUnionField<*mut libc::c_char>,
    pub col: __BindgenUnionField<TCOD_color_t>,
    pub dice: __BindgenUnionField<TCOD_dice_t>,
    pub list: __BindgenUnionField<TCOD_list_t>,
    pub custom: __BindgenUnionField<*mut libc::c_void>,
    pub bindgen_union_field: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_TCOD_value_t() {
    assert_eq!(::std::mem::size_of::<TCOD_value_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TCOD_value_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_value_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TCOD_value_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . b as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . c as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . i as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( i ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . f as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( f ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . s as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . col as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( col ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . dice as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( dice ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . list as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_value_t ) ) . custom as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_value_t ) , "::" ,
                stringify ! ( custom ) ));
}
impl Clone for TCOD_value_t {
    fn clone(&self) -> Self { *self }
}
pub type TCOD_parser_struct_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_struct_get_name(def: TCOD_parser_struct_t)
     -> *const libc::c_char;
}
extern "C" {
    pub fn TCOD_struct_add_property(def: TCOD_parser_struct_t,
                                    name: *const libc::c_char,
                                    type_: TCOD_value_type_t,
                                    mandatory: bool);
}
extern "C" {
    pub fn TCOD_struct_add_list_property(def: TCOD_parser_struct_t,
                                         name: *const libc::c_char,
                                         type_: TCOD_value_type_t,
                                         mandatory: bool);
}
extern "C" {
    pub fn TCOD_struct_add_value_list(def: TCOD_parser_struct_t,
                                      name: *const libc::c_char,
                                      value_list: *mut *const libc::c_char,
                                      mandatory: bool);
}
extern "C" {
    pub fn TCOD_struct_add_value_list_sized(def: TCOD_parser_struct_t,
                                            name: *const libc::c_char,
                                            value_list:
                                                *mut *const libc::c_char,
                                            size: libc::c_int,
                                            mandatory: bool);
}
extern "C" {
    pub fn TCOD_struct_add_flag(def: TCOD_parser_struct_t,
                                propname: *const libc::c_char);
}
extern "C" {
    pub fn TCOD_struct_add_structure(def: TCOD_parser_struct_t,
                                     sub_structure: TCOD_parser_struct_t);
}
extern "C" {
    pub fn TCOD_struct_is_mandatory(def: TCOD_parser_struct_t,
                                    propname: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_struct_get_type(def: TCOD_parser_struct_t,
                                propname: *const libc::c_char)
     -> TCOD_value_type_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_parser_listener_t {
    pub new_struct: ::std::option::Option<unsafe extern "C" fn(str:
                                                                   TCOD_parser_struct_t,
                                                               name:
                                                                   *const libc::c_char)
                                              -> bool>,
    pub new_flag: ::std::option::Option<unsafe extern "C" fn(name:
                                                                 *const libc::c_char)
                                            -> bool>,
    pub new_property: ::std::option::Option<unsafe extern "C" fn(propname:
                                                                     *const libc::c_char,
                                                                 type_:
                                                                     TCOD_value_type_t,
                                                                 value:
                                                                     TCOD_value_t)
                                                -> bool>,
    pub end_struct: ::std::option::Option<unsafe extern "C" fn(str:
                                                                   TCOD_parser_struct_t,
                                                               name:
                                                                   *const libc::c_char)
                                              -> bool>,
    pub error: ::std::option::Option<unsafe extern "C" fn(msg:
                                                              *const libc::c_char)>,
}
#[test]
fn bindgen_test_layout_TCOD_parser_listener_t() {
    assert_eq!(::std::mem::size_of::<TCOD_parser_listener_t>() , 40usize ,
               concat ! ( "Size of: " , stringify ! ( TCOD_parser_listener_t )
               ));
    assert_eq! (::std::mem::align_of::<TCOD_parser_listener_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( TCOD_parser_listener_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_listener_t ) ) . new_struct
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_listener_t
                ) , "::" , stringify ! ( new_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_listener_t ) ) . new_flag as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_listener_t
                ) , "::" , stringify ! ( new_flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_listener_t ) ) . new_property
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_listener_t
                ) , "::" , stringify ! ( new_property ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_listener_t ) ) . end_struct
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_listener_t
                ) , "::" , stringify ! ( end_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_listener_t ) ) . error as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_listener_t
                ) , "::" , stringify ! ( error ) ));
}
impl Clone for TCOD_parser_listener_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_parser_listener_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TCOD_parser_custom_t =
    ::std::option::Option<unsafe extern "C" fn(lex: *mut TCOD_lex_t,
                                               listener:
                                                   *mut TCOD_parser_listener_t,
                                               str: TCOD_parser_struct_t,
                                               propname: *mut libc::c_char)
                              -> TCOD_value_t>;
pub type TCOD_parser_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_parser_new() -> TCOD_parser_t;
}
extern "C" {
    pub fn TCOD_parser_new_struct(parser: TCOD_parser_t,
                                  name: *mut libc::c_char)
     -> TCOD_parser_struct_t;
}
extern "C" {
    pub fn TCOD_parser_new_custom_type(parser: TCOD_parser_t,
                                       custom_type_parser:
                                           TCOD_parser_custom_t)
     -> TCOD_value_type_t;
}
extern "C" {
    pub fn TCOD_parser_run(parser: TCOD_parser_t,
                           filename: *const libc::c_char,
                           listener: *mut TCOD_parser_listener_t);
}
extern "C" {
    pub fn TCOD_parser_delete(parser: TCOD_parser_t);
}
extern "C" {
    pub fn TCOD_parser_error(msg: *const libc::c_char, ...);
}
extern "C" {
    pub fn TCOD_parser_has_property(parser: TCOD_parser_t,
                                    name: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_bool_property(parser: TCOD_parser_t,
                                         name: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_parser_get_char_property(parser: TCOD_parser_t,
                                         name: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_int_property(parser: TCOD_parser_t,
                                        name: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_parser_get_float_property(parser: TCOD_parser_t,
                                          name: *const libc::c_char) -> f32;
}
extern "C" {
    pub fn TCOD_parser_get_string_property(parser: TCOD_parser_t,
                                           name: *const libc::c_char)
     -> *const libc::c_char;
}
extern "C" {
    pub fn TCOD_parser_get_color_property(parser: TCOD_parser_t,
                                          name: *const libc::c_char)
     -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property(parser: TCOD_parser_t,
                                         name: *const libc::c_char)
     -> TCOD_dice_t;
}
extern "C" {
    pub fn TCOD_parser_get_dice_property_py(parser: TCOD_parser_t,
                                            name: *const libc::c_char,
                                            dice: *mut TCOD_dice_t);
}
extern "C" {
    pub fn TCOD_parser_get_custom_property(parser: TCOD_parser_t,
                                           name: *const libc::c_char)
     -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_parser_get_list_property(parser: TCOD_parser_t,
                                         name: *const libc::c_char,
                                         type_: TCOD_value_type_t)
     -> TCOD_list_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_struct_int_t {
    pub name: *mut libc::c_char,
    pub flags: TCOD_list_t,
    pub props: TCOD_list_t,
    pub lists: TCOD_list_t,
    pub structs: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_struct_int_t() {
    assert_eq!(::std::mem::size_of::<TCOD_struct_int_t>() , 40usize , concat !
               ( "Size of: " , stringify ! ( TCOD_struct_int_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_struct_int_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( TCOD_struct_int_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_struct_int_t ) ) . name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_struct_int_t ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_struct_int_t ) ) . flags as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_struct_int_t ) ,
                "::" , stringify ! ( flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_struct_int_t ) ) . props as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_struct_int_t ) ,
                "::" , stringify ! ( props ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_struct_int_t ) ) . lists as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_struct_int_t ) ,
                "::" , stringify ! ( lists ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_struct_int_t ) ) . structs as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_struct_int_t ) ,
                "::" , stringify ! ( structs ) ));
}
impl Clone for TCOD_struct_int_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_struct_int_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TCOD_parser_int_t {
    pub structs: TCOD_list_t,
    pub customs: [TCOD_parser_custom_t; 16usize],
    pub fatal: bool,
    pub props: TCOD_list_t,
}
#[test]
fn bindgen_test_layout_TCOD_parser_int_t() {
    assert_eq!(::std::mem::size_of::<TCOD_parser_int_t>() , 152usize , concat
               ! ( "Size of: " , stringify ! ( TCOD_parser_int_t ) ));
    assert_eq! (::std::mem::align_of::<TCOD_parser_int_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( TCOD_parser_int_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_int_t ) ) . structs as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_int_t ) ,
                "::" , stringify ! ( structs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_int_t ) ) . customs as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_int_t ) ,
                "::" , stringify ! ( customs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_int_t ) ) . fatal as * const
                _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_int_t ) ,
                "::" , stringify ! ( fatal ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TCOD_parser_int_t ) ) . props as * const
                _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( TCOD_parser_int_t ) ,
                "::" , stringify ! ( props ) ));
}
impl Clone for TCOD_parser_int_t {
    fn clone(&self) -> Self { *self }
}
impl Default for TCOD_parser_int_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn TCOD_parse_bool_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_char_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_integer_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_float_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_string_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_color_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_dice_value() -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_value_list_value(def: *mut TCOD_struct_int_t,
                                       listnum: libc::c_int) -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_parse_property_value(parser: *mut TCOD_parser_int_t,
                                     def: TCOD_parser_struct_t,
                                     propname: *mut libc::c_char, list: bool)
     -> TCOD_value_t;
}
extern "C" {
    pub fn TCOD_sys_startup();
}
extern "C" {
    pub fn TCOD_sys_shutdown();
}
extern "C" {
    pub fn TCOD_sys_elapsed_milli() -> u32;
}
extern "C" {
    pub fn TCOD_sys_elapsed_seconds() -> f32;
}
extern "C" {
    pub fn TCOD_sys_sleep_milli(val: u32);
}
extern "C" {
    pub fn TCOD_sys_set_fps(val: libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fps() -> libc::c_int;
}
extern "C" {
    pub fn TCOD_sys_get_last_frame_length() -> f32;
}
extern "C" {
    pub fn TCOD_sys_save_screenshot(filename: *const libc::c_char);
}
extern "C" {
    pub fn TCOD_sys_force_fullscreen_resolution(width: libc::c_int,
                                                height: libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_set_renderer(renderer: TCOD_renderer_t);
}
extern "C" {
    pub fn TCOD_sys_get_renderer() -> TCOD_renderer_t;
}
extern "C" {
    pub fn TCOD_sys_get_current_resolution(w: *mut libc::c_int,
                                           h: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_fullscreen_offsets(offx: *mut libc::c_int,
                                           offy: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_char_size(w: *mut libc::c_int, h: *mut libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_update_char(asciiCode: libc::c_int, fontx: libc::c_int,
                                fonty: libc::c_int, img: TCOD_image_t,
                                x: libc::c_int, y: libc::c_int);
}
extern "C" {
    pub fn TCOD_sys_get_SDL_window() -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_sys_get_SDL_renderer() -> *mut libc::c_void;
}
pub const TCOD_EVENT_NONE: TCOD_event_t = 0;
pub const TCOD_EVENT_KEY_PRESS: TCOD_event_t = 1;
pub const TCOD_EVENT_KEY_RELEASE: TCOD_event_t = 2;
pub const TCOD_EVENT_KEY: TCOD_event_t = 3;
pub const TCOD_EVENT_MOUSE_MOVE: TCOD_event_t = 4;
pub const TCOD_EVENT_MOUSE_PRESS: TCOD_event_t = 8;
pub const TCOD_EVENT_MOUSE_RELEASE: TCOD_event_t = 16;
pub const TCOD_EVENT_MOUSE: TCOD_event_t = 28;
pub const TCOD_EVENT_FINGER_MOVE: TCOD_event_t = 32;
pub const TCOD_EVENT_FINGER_PRESS: TCOD_event_t = 64;
pub const TCOD_EVENT_FINGER_RELEASE: TCOD_event_t = 128;
pub const TCOD_EVENT_FINGER: TCOD_event_t = 224;
pub const TCOD_EVENT_ANY: TCOD_event_t = 255;
pub type TCOD_event_t = libc::c_uint;
extern "C" {
    pub fn TCOD_sys_wait_for_event(eventMask: libc::c_int,
                                   key: *mut TCOD_key_t,
                                   mouse: *mut TCOD_mouse_t, flush: bool)
     -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_check_for_event(eventMask: libc::c_int,
                                    key: *mut TCOD_key_t,
                                    mouse: *mut TCOD_mouse_t) -> TCOD_event_t;
}
extern "C" {
    pub fn TCOD_sys_create_directory(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_file(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_delete_directory(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_is_directory(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_get_directory_content(path: *const libc::c_char,
                                          pattern: *const libc::c_char)
     -> TCOD_list_t;
}
extern "C" {
    pub fn TCOD_sys_file_exists(filename: *const libc::c_char, ...) -> bool;
}
extern "C" {
    pub fn TCOD_sys_read_file(filename: *const libc::c_char,
                              buf: *mut *mut libc::c_uchar, size: *mut usize)
     -> bool;
}
extern "C" {
    pub fn TCOD_sys_write_file(filename: *const libc::c_char,
                               buf: *mut libc::c_uchar, size: u32) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_set(value: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn TCOD_sys_clipboard_get() -> *mut libc::c_char;
}
pub type TCOD_thread_t = *mut libc::c_void;
pub type TCOD_semaphore_t = *mut libc::c_void;
pub type TCOD_mutex_t = *mut libc::c_void;
pub type TCOD_cond_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_thread_new(func:
                               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              *mut libc::c_void)
                                                         -> libc::c_int>,
                           data: *mut libc::c_void) -> TCOD_thread_t;
}
extern "C" {
    pub fn TCOD_thread_delete(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_sys_get_num_cores() -> libc::c_int;
}
extern "C" {
    pub fn TCOD_thread_wait(th: TCOD_thread_t);
}
extern "C" {
    pub fn TCOD_mutex_new() -> TCOD_mutex_t;
}
extern "C" {
    pub fn TCOD_mutex_in(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_out(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_mutex_delete(mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_semaphore_new(initVal: libc::c_int) -> TCOD_semaphore_t;
}
extern "C" {
    pub fn TCOD_semaphore_lock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_unlock(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_semaphore_delete(sem: TCOD_semaphore_t);
}
extern "C" {
    pub fn TCOD_condition_new() -> TCOD_cond_t;
}
extern "C" {
    pub fn TCOD_condition_signal(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_broadcast(sem: TCOD_cond_t);
}
extern "C" {
    pub fn TCOD_condition_wait(sem: TCOD_cond_t, mut_: TCOD_mutex_t);
}
extern "C" {
    pub fn TCOD_condition_delete(sem: TCOD_cond_t);
}
pub type TCOD_library_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_load_library(path: *const libc::c_char) -> TCOD_library_t;
}
extern "C" {
    pub fn TCOD_get_function_address(library: TCOD_library_t,
                                     function_name: *const libc::c_char)
     -> *mut libc::c_void;
}
extern "C" {
    pub fn TCOD_close_library(arg1: TCOD_library_t);
}
pub type SDL_renderer_t =
    ::std::option::Option<unsafe extern "C" fn(sdl_renderer:
                                                   *mut libc::c_void)>;
extern "C" {
    pub fn TCOD_sys_register_SDL_renderer(renderer: SDL_renderer_t);
}
pub type TCOD_text_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_text_init(x: libc::c_int, y: libc::c_int, w: libc::c_int,
                          h: libc::c_int, max_chars: libc::c_int)
     -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_init2(w: libc::c_int, h: libc::c_int,
                           max_chars: libc::c_int) -> TCOD_text_t;
}
extern "C" {
    pub fn TCOD_text_set_pos(txt: TCOD_text_t, x: libc::c_int,
                             y: libc::c_int);
}
extern "C" {
    pub fn TCOD_text_set_properties(txt: TCOD_text_t,
                                    cursor_char: libc::c_int,
                                    blink_interval: libc::c_int,
                                    prompt: *const libc::c_char,
                                    tab_size: libc::c_int);
}
extern "C" {
    pub fn TCOD_text_set_colors(txt: TCOD_text_t, fore: TCOD_color_t,
                                back: TCOD_color_t, back_transparency: f32);
}
extern "C" {
    pub fn TCOD_text_update(txt: TCOD_text_t, key: TCOD_key_t) -> bool;
}
extern "C" {
    pub fn TCOD_text_render(txt: TCOD_text_t, con: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_text_get(txt: TCOD_text_t) -> *const libc::c_char;
}
extern "C" {
    pub fn TCOD_text_reset(txt: TCOD_text_t);
}
extern "C" {
    pub fn TCOD_text_delete(txt: TCOD_text_t);
}
pub type TCOD_zip_t = *mut libc::c_void;
extern "C" {
    pub fn TCOD_zip_new() -> TCOD_zip_t;
}
extern "C" {
    pub fn TCOD_zip_delete(zip: TCOD_zip_t);
}
extern "C" {
    pub fn TCOD_zip_put_char(zip: TCOD_zip_t, val: libc::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_int(zip: TCOD_zip_t, val: libc::c_int);
}
extern "C" {
    pub fn TCOD_zip_put_float(zip: TCOD_zip_t, val: f32);
}
extern "C" {
    pub fn TCOD_zip_put_string(zip: TCOD_zip_t, val: *const libc::c_char);
}
extern "C" {
    pub fn TCOD_zip_put_color(zip: TCOD_zip_t, val: TCOD_color_t);
}
extern "C" {
    pub fn TCOD_zip_put_image(zip: TCOD_zip_t, val: TCOD_image_t);
}
extern "C" {
    pub fn TCOD_zip_put_console(zip: TCOD_zip_t, val: TCOD_console_t);
}
extern "C" {
    pub fn TCOD_zip_put_data(zip: TCOD_zip_t, nbBytes: libc::c_int,
                             data: *const libc::c_void);
}
extern "C" {
    pub fn TCOD_zip_get_current_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_save_to_file(zip: TCOD_zip_t,
                                 filename: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_zip_load_from_file(zip: TCOD_zip_t,
                                   filename: *const libc::c_char)
     -> libc::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_char(zip: TCOD_zip_t) -> libc::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_int(zip: TCOD_zip_t) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_float(zip: TCOD_zip_t) -> f32;
}
extern "C" {
    pub fn TCOD_zip_get_string(zip: TCOD_zip_t) -> *const libc::c_char;
}
extern "C" {
    pub fn TCOD_zip_get_color(zip: TCOD_zip_t) -> TCOD_color_t;
}
extern "C" {
    pub fn TCOD_zip_get_image(zip: TCOD_zip_t) -> TCOD_image_t;
}
extern "C" {
    pub fn TCOD_zip_get_console(zip: TCOD_zip_t) -> TCOD_console_t;
}
extern "C" {
    pub fn TCOD_zip_get_data(zip: TCOD_zip_t, nbBytes: libc::c_int,
                             data: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn TCOD_zip_get_remaining_bytes(zip: TCOD_zip_t) -> u32;
}
extern "C" {
    pub fn TCOD_zip_skip_bytes(zip: TCOD_zip_t, nbBytes: u32);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl Default for __va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
